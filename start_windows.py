#!/usr/bin/env python3
"""
Script de d√©marrage simplifi√© pour Windows
Lance le syst√®me sans configuration complexe
"""
import os
import sys
import subprocess
from pathlib import Path

def check_python():
    """V√©rifier si Python est disponible"""
    try:
        result = subprocess.run([sys.executable, '--version'], 
                              capture_output=True, text=True, check=True)
        print(f"‚úì Python d√©tect√©: {result.stdout.strip()}")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Python non trouv√© dans le PATH")
        return False

def install_requirements():
    """Installer les d√©pendances si n√©cessaires"""
    requirements = [
        'flask', 'flask-sqlalchemy', 'flask-login', 'werkzeug',
        'sendgrid', 'apscheduler', 'requests'
    ]
    
    print("V√©rification des d√©pendances...")
    missing = []
    
    for package in requirements:
        try:
            __import__(package.replace('-', '_'))
        except ImportError:
            missing.append(package)
    
    if missing:
        print(f"Installation des packages manquants: {', '.join(missing)}")
        try:
            subprocess.run([sys.executable, '-m', 'pip', 'install'] + missing, 
                         check=True)
            print("‚úì D√©pendances install√©es")
        except subprocess.CalledProcessError:
            print("‚ùå Erreur lors de l'installation des d√©pendances")
            return False
    else:
        print("‚úì Toutes les d√©pendances sont pr√©sentes")
    
    return True

def setup_environment():
    """Configurer l'environnement"""
    # Variables d'environnement par d√©faut
    os.environ.setdefault('SESSION_SECRET', 'dev-secret-key-windows')
    os.environ.setdefault('DATABASE_URL', 'sqlite:///monitoring_local.db')
    os.environ.setdefault('FLASK_ENV', 'development')
    
    print("‚úì Variables d'environnement configur√©es")

def main():
    """Point d'entr√©e principal"""
    print("=" * 50)
    print("  SYST√àME DE MONITORING CAM√âRAS - Windows")
    print("=" * 50)
    print()
    
    # V√©rifications pr√©liminaires
    if not check_python():
        input("Appuyez sur Entr√©e pour quitter...")
        sys.exit(1)
    
    if not install_requirements():
        input("Appuyez sur Entr√©e pour quitter...")
        sys.exit(1)
    
    setup_environment()
    
    try:
        # Importer et lancer l'application
        print("\nD√©marrage du serveur...")
        print("üåê URL: http://localhost:5000")
        print("üë§ Admin: admin / admin123")
        print("\nAppuyez sur Ctrl+C pour arr√™ter")
        print("=" * 50)
        
        from app import app
        app.run(host='127.0.0.1', port=5000, debug=True, threaded=True)
        
    except KeyboardInterrupt:
        print("\n\n‚úÖ Serveur arr√™t√©")
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        input("Appuyez sur Entr√©e pour quitter...")

if __name__ == '__main__':
    main()