#!/usr/bin/env python3
"""
Version Windows du serveur de monitoring de cam√©ras
Optimis√© pour fonctionner directement avec Python sur Windows
"""
import os
import sys
import logging
from pathlib import Path

# Ajouter le r√©pertoire courant au PYTHONPATH
current_dir = Path(__file__).parent.absolute()
sys.path.insert(0, str(current_dir))

# Configuration pour Windows
os.environ.setdefault('SESSION_SECRET', 'dev-secret-key-change-in-production')
os.environ.setdefault('DATABASE_URL', 'sqlite:///monitoring_local.db')

# Configuration du logging pour Windows
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('camera_monitoring.log', encoding='utf-8')
    ]
)

logger = logging.getLogger(__name__)

def main():
    """Point d'entr√©e principal pour Windows"""
    try:
        logger.info("D√©marrage du syst√®me de monitoring de cam√©ras...")
        
        # Importer l'application Flask
        from app import app
        import routes  # Importer les routes
        
        # Configuration sp√©cifique √† Windows
        app.config['DEBUG'] = False  # D√©sactiver le debug pour √©viter les erreurs
        app.config['ENV'] = 'production'
        
        print("=" * 60)
        print("   SYST√àME DE MONITORING DE CAM√âRAS")
        print("=" * 60)
        print()
        print("üîó Serveur d√©marr√© sur: http://localhost:5000")
        print("üìß Admin par d√©faut: admin / admin123")
        print("‚ö†Ô∏è  IMPORTANT: Changez le mot de passe admin !")
        print()
        print("Appuyez sur Ctrl+C pour arr√™ter le serveur")
        print("=" * 60)
        
        # Lancer le serveur Flask
        app.run(
            host='127.0.0.1',  # Localhost seulement pour la s√©curit√©
            port=5000,
            debug=False,        # D√©sactiver debug pour √©viter les conflits
            use_reloader=False, # √âviter les probl√®mes de rechargement sur Windows
            threaded=True       # Support multi-thread
        )
        
    except KeyboardInterrupt:
        logger.info("Arr√™t du serveur demand√© par l'utilisateur")
        print("\n\n‚úÖ Serveur arr√™t√© proprement")
        
    except ImportError as e:
        logger.error(f"Erreur d'importation: {e}")
        print(f"\n‚ùå ERREUR: Impossible d'importer les modules requis")
        print(f"D√©tails: {e}")
        print("\nSolutions possibles:")
        print("1. V√©rifiez que vous √™tes dans le bon r√©pertoire")
        print("2. Ex√©cutez 'install_windows.bat' pour installer les d√©pendances")
        print("3. Activez l'environnement virtuel: venv\\Scripts\\activate")
        input("\nAppuyez sur Entr√©e pour continuer...")
        sys.exit(1)
        
    except Exception as e:
        logger.error(f"Erreur lors du d√©marrage: {e}")
        print(f"\n‚ùå ERREUR: {e}")
        print("\nV√©rifiez les logs dans 'camera_monitoring.log' pour plus de d√©tails")
        input("\nAppuyez sur Entr√©e pour continuer...")
        sys.exit(1)

if __name__ == '__main__':
    main()