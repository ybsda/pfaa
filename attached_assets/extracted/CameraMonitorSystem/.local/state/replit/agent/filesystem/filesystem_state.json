{"file_contents":{"app.py":{"content":"import os\nimport logging\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import LoginManager\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\n\ndb = SQLAlchemy()\n\n# Create the app\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\", \"dev-secret-key-change-in-production\")\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n\n# Configure the database\ndatabase_url = os.environ.get(\"DATABASE_URL\")\nif database_url and database_url.startswith(\"postgres://\"):\n    database_url = database_url.replace(\"postgres://\", \"postgresql://\", 1)\n\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = database_url or \"sqlite:///monitoring_local.db\"\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    \"pool_recycle\": 300,\n    \"pool_pre_ping\": True,\n}\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\n\n# Initialize the app with the extension\ndb.init_app(app)\n\n# Configure Flask-Login\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'  # type: ignore\nlogin_manager.login_message = 'Veuillez vous connecter pour acc√©der √† cette page.'\nlogin_manager.login_message_category = 'info'\n\n# Import models and routes\nimport models\nimport routes\n\n@login_manager.user_loader\ndef load_user(user_id):\n    from models import User\n    return User.query.get(int(user_id))\n\n# Initialize database and scheduler in a function\ndef init_app():\n    with app.app_context():\n        db.create_all()\n        from scheduler import init_scheduler\n        init_scheduler(app)\n\n# Only initialize if this is the main execution\nif __name__ != '__main__':\n    init_app()\n\nlogger = logging.getLogger(__name__)\nlogger.info(\"Application initialized successfully\")\n","size_bytes":1839},"email_service.py":{"content":"\"\"\"\nService d'envoi d'emails avec SendGrid\n\"\"\"\nimport os\nimport logging\nfrom sendgrid import SendGridAPIClient\nfrom sendgrid.helpers.mail import Mail, Email, To, Content\n\nlogger = logging.getLogger(__name__)\n\nclass EmailService:\n    def __init__(self):\n        self.api_key = os.environ.get('SENDGRID_API_KEY')\n        if not self.api_key:\n            logger.warning(\"SENDGRID_API_KEY non configur√©e. Les emails ne pourront pas √™tre envoy√©s.\")\n        \n        self.from_email = os.environ.get('FROM_EMAIL', 'no-reply@camerasystem.local')\n        self.sg = SendGridAPIClient(self.api_key) if self.api_key else None\n    \n    def send_email(self, to_email, subject, text_content=None, html_content=None):\n        \"\"\"Envoie un email\"\"\"\n        if not self.sg:\n            logger.error(\"Service email non configur√©. Impossible d'envoyer l'email.\")\n            return False\n        \n        try:\n            message = Mail(\n                from_email=Email(self.from_email),\n                to_emails=To(to_email),\n                subject=subject\n            )\n            \n            if html_content:\n                message.content = Content(\"text/html\", html_content)\n            elif text_content:\n                message.content = Content(\"text/plain\", text_content)\n            else:\n                logger.error(\"Aucun contenu fourni pour l'email\")\n                return False\n            \n            response = self.sg.send(message)\n            logger.info(f\"Email envoy√© avec succ√®s √† {to_email}. Status: {response.status_code}\")\n            return True\n            \n        except Exception as e:\n            logger.error(f\"Erreur lors de l'envoi de l'email √† {to_email}: {e}\")\n            return False\n    \n    def send_equipment_offline_alert(self, client_email, client_name, equipment_name, equipment_type, equipment_ip):\n        \"\"\"Envoie une alerte d'√©quipement hors ligne\"\"\"\n        subject = f\"üö® Alerte √âquipement Hors Ligne - {equipment_name}\"\n        \n        html_content = f\"\"\"\n        <html>\n        <body style=\"font-family: Arial, sans-serif; line-height: 1.6; color: #333;\">\n            <div style=\"max-width: 600px; margin: 0 auto; padding: 20px;\">\n                <div style=\"background: linear-gradient(135deg, #dc3545, #c82333); color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0;\">\n                    <h1 style=\"margin: 0; font-size: 24px;\">‚ö†Ô∏è Alerte √âquipement</h1>\n                    <p style=\"margin: 5px 0 0 0; opacity: 0.9;\">Syst√®me de Surveillance Cam√©ras</p>\n                </div>\n                \n                <div style=\"background: #f8f9fa; padding: 30px; border-radius: 0 0 8px 8px; border: 1px solid #dee2e6;\">\n                    <h2 style=\"color: #dc3545; margin-top: 0;\">√âquipement D√©connect√©</h2>\n                    \n                    <p>Bonjour <strong>{client_name}</strong>,</p>\n                    \n                    <p>Nous vous informons qu'un de vos √©quipements de surveillance s'est d√©connect√© :</p>\n                    \n                    <div style=\"background: white; padding: 20px; border-radius: 6px; border-left: 4px solid #dc3545; margin: 20px 0;\">\n                        <table style=\"width: 100%; border-collapse: collapse;\">\n                            <tr>\n                                <td style=\"padding: 8px 0; font-weight: bold; width: 120px;\">Nom :</td>\n                                <td style=\"padding: 8px 0;\">{equipment_name}</td>\n                            </tr>\n                            <tr>\n                                <td style=\"padding: 8px 0; font-weight: bold;\">Type :</td>\n                                <td style=\"padding: 8px 0;\">{equipment_type}</td>\n                            </tr>\n                            <tr>\n                                <td style=\"padding: 8px 0; font-weight: bold;\">Adresse IP :</td>\n                                <td style=\"padding: 8px 0;\">{equipment_ip}</td>\n                            </tr>\n                            <tr>\n                                <td style=\"padding: 8px 0; font-weight: bold;\">Statut :</td>\n                                <td style=\"padding: 8px 0; color: #dc3545; font-weight: bold;\">üî¥ Hors Ligne</td>\n                            </tr>\n                        </table>\n                    </div>\n                    \n                    <h3>Actions Recommand√©es :</h3>\n                    <ul style=\"color: #495057;\">\n                        <li>V√©rifiez la connexion r√©seau de l'√©quipement</li>\n                        <li>Contr√¥lez l'alimentation √©lectrique</li>\n                        <li>Red√©marrez l'√©quipement si n√©cessaire</li>\n                        <li>Contactez le support technique si le probl√®me persiste</li>\n                    </ul>\n                    \n                    <div style=\"margin-top: 30px; padding: 15px; background: #e9ecef; border-radius: 6px; text-align: center;\">\n                        <p style=\"margin: 0; color: #6c757d; font-size: 14px;\">\n                            Cet email a √©t√© envoy√© automatiquement par le syst√®me de surveillance.<br>\n                            Pour plus d'informations, connectez-vous √† votre interface de monitoring.\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </body>\n        </html>\n        \"\"\"\n        \n        return self.send_email(client_email, subject, html_content=html_content)\n    \n    def send_account_approval_notification(self, user_email, user_name, approved=True):\n        \"\"\"Envoie une notification d'approbation/refus de compte\"\"\"\n        if approved:\n            subject = \"‚úÖ Votre compte a √©t√© approuv√© - Camera Monitor\"\n            html_content = f\"\"\"\n            <html>\n            <body style=\"font-family: Arial, sans-serif; line-height: 1.6; color: #333;\">\n                <div style=\"max-width: 600px; margin: 0 auto; padding: 20px;\">\n                    <div style=\"background: linear-gradient(135deg, #28a745, #20c997); color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0;\">\n                        <h1 style=\"margin: 0; font-size: 24px;\">‚úÖ Compte Approuv√©</h1>\n                        <p style=\"margin: 5px 0 0 0; opacity: 0.9;\">Camera Monitor System</p>\n                    </div>\n                    \n                    <div style=\"background: #f8f9fa; padding: 30px; border-radius: 0 0 8px 8px; border: 1px solid #dee2e6;\">\n                        <h2 style=\"color: #28a745; margin-top: 0;\">Bienvenue !</h2>\n                        \n                        <p>Bonjour <strong>{user_name}</strong>,</p>\n                        \n                        <p>Nous sommes heureux de vous informer que votre demande de compte a √©t√© <strong>approuv√©e</strong> par notre √©quipe administrative.</p>\n                        \n                        <p>Vous pouvez maintenant vous connecter √† votre interface de monitoring et commencer √† g√©rer vos √©quipements de surveillance.</p>\n                        \n                        <div style=\"text-align: center; margin: 30px 0;\">\n                            <a href=\"#\" style=\"display: inline-block; padding: 12px 24px; background: #28a745; color: white; text-decoration: none; border-radius: 6px; font-weight: bold;\">\n                                Se Connecter\n                            </a>\n                        </div>\n                        \n                        <p>Si vous avez des questions, n'h√©sitez pas √† contacter notre support technique.</p>\n                        \n                        <p>Cordialement,<br>L'√©quipe Camera Monitor</p>\n                    </div>\n                </div>\n            </body>\n            </html>\n            \"\"\"\n        else:\n            subject = \"‚ùå Votre demande de compte a √©t√© refus√©e - Camera Monitor\"\n            html_content = f\"\"\"\n            <html>\n            <body style=\"font-family: Arial, sans-serif; line-height: 1.6; color: #333;\">\n                <div style=\"max-width: 600px; margin: 0 auto; padding: 20px;\">\n                    <div style=\"background: linear-gradient(135deg, #dc3545, #c82333); color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0;\">\n                        <h1 style=\"margin: 0; font-size: 24px;\">‚ùå Demande Refus√©e</h1>\n                        <p style=\"margin: 5px 0 0 0; opacity: 0.9;\">Camera Monitor System</p>\n                    </div>\n                    \n                    <div style=\"background: #f8f9fa; padding: 30px; border-radius: 0 0 8px 8px; border: 1px solid #dee2e6;\">\n                        <h2 style=\"color: #dc3545; margin-top: 0;\">Demande Non Approuv√©e</h2>\n                        \n                        <p>Bonjour <strong>{user_name}</strong>,</p>\n                        \n                        <p>Nous vous informons que votre demande de compte n'a pas pu √™tre approuv√©e √† ce moment.</p>\n                        \n                        <p>Pour plus d'informations concernant cette d√©cision ou pour soumettre une nouvelle demande, nous vous invitons √† contacter directement notre √©quipe administrative.</p>\n                        \n                        <p>Cordialement,<br>L'√©quipe Camera Monitor</p>\n                    </div>\n                </div>\n            </body>\n            </html>\n            \"\"\"\n        \n        return self.send_email(user_email, subject, html_content=html_content)\n\n# Instance globale du service email\nemail_service = EmailService()","size_bytes":9510},"init_admin_user.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nScript pour cr√©er un utilisateur administrateur par d√©faut\n\"\"\"\n\nfrom app import app, db\nfrom models import User\n\ndef create_admin_user():\n    \"\"\"Cr√©e un utilisateur administrateur par d√©faut\"\"\"\n    with app.app_context():\n        # V√©rifier si un admin existe d√©j√†\n        admin_exists = User.query.filter_by(role='admin').first()\n        \n        if admin_exists:\n            print(f\"Un administrateur existe d√©j√†: {admin_exists.nom_utilisateur}\")\n            return\n        \n        # Cr√©er l'utilisateur admin\n        admin_user = User(\n            nom_utilisateur='admin',\n            email='admin@camerasystem.local',\n            nom_complet='Administrateur Syst√®me',\n            role='admin'\n        )\n        \n        # Mot de passe par d√©faut : admin123\n        admin_user.set_password('admin123')\n        \n        db.session.add(admin_user)\n        db.session.commit()\n        \n        print(\"‚úì Utilisateur administrateur cr√©√© avec succ√®s\")\n        print(\"Nom d'utilisateur: admin\")\n        print(\"Mot de passe: admin123\")\n        print(\"‚ö†Ô∏è  N'oubliez pas de changer le mot de passe!\")\n\nif __name__ == '__main__':\n    create_admin_user()","size_bytes":1194},"main.py":{"content":"from app import app, init_app\n\nif __name__ == \"__main__\":\n    init_app()\n    app.run(host=\"0.0.0.0\", port=5000, debug=True)\n","size_bytes":124},"models.py":{"content":"from datetime import datetime, timedelta\nfrom app import db\nfrom sqlalchemy import func\nfrom flask_login import UserMixin\nimport hashlib\n\nclass User(UserMixin, db.Model):\n    __tablename__ = 'users'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    nom_utilisateur = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    mot_de_passe_hash = db.Column(db.String(32), nullable=False)  # MD5 hash\n    nom_complet = db.Column(db.String(200))\n    role = db.Column(db.String(20), default='client')  # 'admin', 'client'\n    statut = db.Column(db.String(20), default='en_attente')  # 'en_attente', 'approuve', 'refuse'\n    date_creation = db.Column(db.DateTime, default=datetime.utcnow)\n    derniere_connexion = db.Column(db.DateTime)\n    actif = db.Column(db.Boolean, default=True)\n    \n    # Relation avec le client (si c'est un utilisateur client)\n    client_id = db.Column(db.Integer, db.ForeignKey('clients.id'), nullable=True)\n    \n    def __repr__(self):\n        return f'<User {self.nom_utilisateur}>'\n    \n    def set_password(self, mot_de_passe):\n        \"\"\"Crypte le mot de passe avec MD5\"\"\"\n        self.mot_de_passe_hash = hashlib.md5(mot_de_passe.encode('utf-8')).hexdigest()\n    \n    def check_password(self, mot_de_passe):\n        \"\"\"V√©rifie le mot de passe\"\"\"\n        return self.mot_de_passe_hash == hashlib.md5(mot_de_passe.encode('utf-8')).hexdigest()\n    \n    def update_last_login(self):\n        \"\"\"Met √† jour la date de derni√®re connexion\"\"\"\n        self.derniere_connexion = datetime.utcnow()\n        db.session.commit()\n\nclass Client(db.Model):\n    __tablename__ = 'clients'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    nom = db.Column(db.String(100), nullable=False)\n    adresse = db.Column(db.Text)\n    telephone = db.Column(db.String(20))\n    email = db.Column(db.String(100), nullable=False)  # Email obligatoire pour les notifications\n    date_creation = db.Column(db.DateTime, default=datetime.utcnow)\n    actif = db.Column(db.Boolean, default=True)\n    \n    # Relation avec les √©quipements\n    equipements = db.relationship('Equipement', backref='client', lazy=True, cascade='all, delete-orphan')\n    \n    # Relation avec les utilisateurs\n    users = db.relationship('User', backref='client', lazy=True)\n    \n    def __repr__(self):\n        return f'<Client {self.nom}>'\n    \n    @property\n    def nb_equipements_total(self):\n        return db.session.query(Equipement).filter_by(client_id=self.id, actif=True).count()\n    \n    @property\n    def nb_equipements_en_ligne(self):\n        equipements = db.session.query(Equipement).filter_by(client_id=self.id, actif=True).all()\n        return len([eq for eq in equipements if eq.est_en_ligne])\n    \n    @property\n    def nb_equipements_hors_ligne(self):\n        equipements = db.session.query(Equipement).filter_by(client_id=self.id, actif=True).all()\n        return len([eq for eq in equipements if not eq.est_en_ligne])\n\nclass Equipement(db.Model):\n    __tablename__ = 'equipements'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    nom = db.Column(db.String(100), nullable=False)\n    type_equipement = db.Column(db.String(50), nullable=False)  # DVR, Camera, etc.\n    adresse_ip = db.Column(db.String(45), nullable=False)\n    port = db.Column(db.Integer, default=80)\n    client_id = db.Column(db.Integer, db.ForeignKey('clients.id'), nullable=False)\n    dernier_ping = db.Column(db.DateTime)\n    date_creation = db.Column(db.DateTime, default=datetime.utcnow)\n    actif = db.Column(db.Boolean, default=True)\n    \n    # Relation avec l'historique des pings\n    historique_pings = db.relationship('HistoriquePing', backref='equipement', lazy=True, cascade='all, delete-orphan')\n    \n    def __repr__(self):\n        return f'<Equipement {self.nom} - {self.adresse_ip}>'\n    \n    @property\n    def est_en_ligne(self):\n        \"\"\"V√©rifie si l'√©quipement est consid√©r√© comme en ligne (ping < 2 minutes)\"\"\"\n        if not self.dernier_ping:\n            return False\n        \n        timeout = datetime.utcnow() - timedelta(minutes=2)\n        return self.dernier_ping > timeout\n    \n    @property\n    def statut_texte(self):\n        return \"En ligne\" if self.est_en_ligne else \"Hors ligne\"\n    \n    @property\n    def duree_depuis_dernier_ping(self):\n        \"\"\"Retourne la dur√©e depuis le dernier ping en format lisible\"\"\"\n        if not self.dernier_ping:\n            return \"Jamais\"\n        \n        delta = datetime.utcnow() - self.dernier_ping\n        \n        if delta.days > 0:\n            return f\"{delta.days} jour(s)\"\n        elif delta.seconds > 3600:\n            heures = delta.seconds // 3600\n            return f\"{heures} heure(s)\"\n        elif delta.seconds > 60:\n            minutes = delta.seconds // 60\n            return f\"{minutes} minute(s)\"\n        else:\n            return \"< 1 minute\"\n\nclass HistoriquePing(db.Model):\n    __tablename__ = 'historique_pings'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    equipement_id = db.Column(db.Integer, db.ForeignKey('equipements.id'), nullable=False)\n    timestamp = db.Column(db.DateTime, default=datetime.utcnow)\n    statut = db.Column(db.String(20), nullable=False)  # 'success', 'timeout', 'error'\n    reponse_ms = db.Column(db.Integer)  # Temps de r√©ponse en millisecondes\n    message = db.Column(db.Text)\n    \n    def __repr__(self):\n        return f'<HistoriquePing {self.equipement_id} - {self.statut} - {self.timestamp}>'\n\nclass Alerte(db.Model):\n    __tablename__ = 'alertes'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    equipement_id = db.Column(db.Integer, db.ForeignKey('equipements.id'), nullable=False)\n    type_alerte = db.Column(db.String(50), nullable=False)  # 'hors_ligne', 'retour_en_ligne'\n    message = db.Column(db.Text, nullable=False)\n    timestamp = db.Column(db.DateTime, default=datetime.utcnow)\n    lue = db.Column(db.Boolean, default=False)\n    \n    # Relation avec l'√©quipement\n    equipement = db.relationship('Equipement', backref='alertes')\n    \n    def __repr__(self):\n        return f'<Alerte {self.type_alerte} - {self.equipement_id}>'\n","size_bytes":6138},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"apscheduler>=3.11.0\",\n    \"email-validator>=2.2.0\",\n    \"flask-dance>=7.1.0\",\n    \"flask>=3.1.1\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"requests>=2.32.4\",\n    \"sqlalchemy>=2.0.42\",\n    \"werkzeug>=3.1.3\",\n    \"flask-login>=0.6.3\",\n    \"oauthlib>=3.3.1\",\n    \"pyjwt>=2.10.1\",\n    \"sendgrid>=6.12.4\",\n]\n","size_bytes":500},"replit.md":{"content":"# Overview\n\nThis is a Flask-based camera monitoring system designed to track and manage security equipment (cameras, DVRs) for multiple clients. The application provides real-time monitoring, alerting, and historical tracking of equipment status through ping-based connectivity checks.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Flask Templates**: Jinja2 templating with Bootstrap dark theme for responsive UI\n- **Static Assets**: CSS customization for dark theme with Font Awesome icons\n- **JavaScript**: Chart.js for data visualization and Bootstrap components for modals\n- **Multi-language Support**: French interface with translation capability\n\n## Backend Architecture\n- **Flask Web Framework**: Main application server with blueprint-style route organization\n- **SQLAlchemy ORM**: Database abstraction layer with model definitions\n- **Background Scheduling**: APScheduler for periodic equipment health checks\n- **Logging**: Structured logging throughout the application\n- **WSGI**: ProxyFix middleware for deployment compatibility\n\n## Database Schema\n- **Client Model**: Stores client information (name, address, contact details)\n- **Equipment Model**: Tracks individual devices (cameras, DVRs) with IP addresses and status\n- **Alert Model**: Records system alerts for offline equipment (referenced but not fully implemented)\n- **Ping History Model**: Logs connectivity check results (referenced but not fully implemented)\n\n## Monitoring System\n- **Ping-based Monitoring**: Periodic connectivity checks to equipment endpoints\n- **Alert Generation**: Automated offline detection with configurable timeout thresholds\n- **Status Tracking**: Real-time equipment online/offline status calculation\n- **Historical Data**: Ping response time and connectivity history storage\n\n## API Design\n- **REST Endpoints**: JSON API for equipment ping reporting\n- **Status Endpoints**: Real-time equipment status queries\n- **Dashboard Data**: Aggregated statistics for management interface\n\n## Database Configuration\n- **SQLite Development**: Local file-based database for development\n- **PostgreSQL Production**: Environment-variable configured for deployment\n- **Connection Pooling**: Configured with health checks and recycling\n\n# External Dependencies\n\n## Core Framework Dependencies\n- **Flask**: Web application framework\n- **Flask-SQLAlchemy**: Database ORM and connection management\n- **Werkzeug**: WSGI utilities and middleware\n\n## Scheduling and Background Tasks\n- **APScheduler**: Background task scheduling for equipment monitoring\n- **IntervalTrigger**: Periodic execution of health checks\n\n## Frontend Libraries\n- **Bootstrap**: UI framework with dark theme (via Replit CDN)\n- **Font Awesome**: Icon library for UI elements\n- **Chart.js**: JavaScript charting library for data visualization\n\n## Development and Testing Tools\n- **Requests Library**: HTTP client for testing and simulation scripts\n- **Logging**: Python standard library for application logging\n\n## Database Support\n- **SQLite**: Default development database\n- **PostgreSQL**: Production database support (configurable via environment variables)\n\n## Environment Configuration\n- **Environment Variables**: DATABASE_URL for database configuration, SESSION_SECRET for security\n- **Development Mode**: Debug mode with auto-reload capabilities","size_bytes":3390},"routes.py":{"content":"import logging\nfrom datetime import datetime, timedelta\nfrom flask import render_template, request, jsonify, flash, redirect, url_for, session\nfrom flask_login import login_user, logout_user, login_required, current_user\nfrom app import app, db\nfrom models import Client, Equipement, HistoriquePing, Alerte, User\nfrom email_service import email_service\n\nlogger = logging.getLogger(__name__)\n\n# Routes d'authentification\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    \"\"\"Page de connexion\"\"\"\n    if current_user.is_authenticated:\n        return redirect(url_for('dashboard'))\n    \n    if request.method == 'POST':\n        nom_utilisateur = request.form.get('nom_utilisateur')\n        mot_de_passe = request.form.get('mot_de_passe')\n        \n        if not nom_utilisateur or not mot_de_passe:\n            flash('Veuillez saisir votre nom d\\'utilisateur et mot de passe.', 'error')\n            return render_template('login.html')\n        \n        user = User.query.filter_by(nom_utilisateur=nom_utilisateur, actif=True).first()\n        \n        if user and user.check_password(mot_de_passe):\n            # V√©rifier si le compte est approuv√©\n            if user.statut == 'en_attente':\n                flash('Votre compte est en attente d\\'approbation par un administrateur.', 'warning')\n                return render_template('login.html')\n            elif user.statut == 'refuse':\n                flash('Votre demande de compte a √©t√© refus√©e. Contactez un administrateur.', 'error')\n                return render_template('login.html')\n            \n            login_user(user)\n            user.update_last_login()\n            flash(f'Connexion r√©ussie ! Bienvenue {user.nom_complet or user.nom_utilisateur}.', 'success')\n            \n            # Redirection vers la page demand√©e ou dashboard\n            next_page = request.args.get('next')\n            return redirect(next_page) if next_page else redirect(url_for('dashboard'))\n        else:\n            flash('Nom d\\'utilisateur ou mot de passe incorrect.', 'error')\n    \n    return render_template('login.html')\n\n@app.route('/logout')\n@login_required\ndef logout():\n    \"\"\"D√©connexion\"\"\"\n    logout_user()\n    flash('Vous avez √©t√© d√©connect√© avec succ√®s.', 'info')\n    return redirect(url_for('login'))\n\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    \"\"\"Page d'inscription pour les clients (avec validation admin)\"\"\"\n    if request.method == 'POST':\n        nom_utilisateur = request.form.get('nom_utilisateur')\n        email = request.form.get('email')\n        mot_de_passe = request.form.get('mot_de_passe')\n        nom_complet = request.form.get('nom_complet')\n        nom_entreprise = request.form.get('nom_entreprise')\n        adresse = request.form.get('adresse')\n        telephone = request.form.get('telephone')\n        \n        if not all([nom_utilisateur, email, mot_de_passe, nom_entreprise]):\n            flash('Tous les champs obligatoires doivent √™tre remplis.', 'error')\n            return render_template('register.html')\n        \n        # V√©rifier si l'utilisateur existe d√©j√†\n        if User.query.filter_by(nom_utilisateur=nom_utilisateur).first():\n            flash('Ce nom d\\'utilisateur existe d√©j√†.', 'error')\n            return render_template('register.html')\n        \n        if User.query.filter_by(email=email).first():\n            flash('Cette adresse email est d√©j√† utilis√©e.', 'error')\n            return render_template('register.html')\n        \n        try:\n            # Cr√©er d'abord le client\n            nouveau_client = Client(\n                nom=nom_entreprise,\n                email=email,\n                adresse=adresse,\n                telephone=telephone\n            )\n            db.session.add(nouveau_client)\n            db.session.flush()  # Pour obtenir l'ID du client\n            \n            # Cr√©er l'utilisateur li√© au client\n            nouveau_user = User(\n                nom_utilisateur=nom_utilisateur,\n                email=email,\n                nom_complet=nom_complet,\n                role='client',\n                statut='en_attente',\n                client_id=nouveau_client.id\n            )\n            nouveau_user.set_password(mot_de_passe)\n            \n            db.session.add(nouveau_user)\n            db.session.commit()\n            \n            flash('Votre demande de compte a √©t√© soumise avec succ√®s ! Un administrateur va examiner votre demande et vous recevrez un email de confirmation.', 'success')\n            return redirect(url_for('login'))\n            \n        except Exception as e:\n            db.session.rollback()\n            logger.error(f'Erreur lors de la cr√©ation du compte client: {e}')\n            flash('Une erreur est survenue lors de la cr√©ation du compte.', 'error')\n    \n    return render_template('register.html')\n\n@app.route('/')\n@login_required\ndef dashboard():\n    \"\"\"Page d'accueil avec vue d'ensemble du syst√®me\"\"\"\n    try:\n        # Statistiques globales\n        total_clients = Client.query.filter_by(actif=True).count()\n        total_equipements = Equipement.query.filter_by(actif=True).count()\n        \n        # Compter les √©quipements en ligne et hors ligne\n        equipements_en_ligne = 0\n        equipements_hors_ligne = 0\n        \n        equipements = Equipement.query.filter_by(actif=True).all()\n        for eq in equipements:\n            if eq.est_en_ligne:\n                equipements_en_ligne += 1\n            else:\n                equipements_hors_ligne += 1\n        \n        # Alertes non lues\n        alertes_non_lues = Alerte.query.filter_by(lue=False).count()\n        \n        # Derni√®res alertes\n        dernieres_alertes = Alerte.query.order_by(Alerte.timestamp.desc()).limit(10).all()\n        \n        # Clients avec leurs √©quipements\n        clients = Client.query.filter_by(actif=True).all()\n        \n        stats = {\n            'total_clients': total_clients,\n            'total_equipements': total_equipements,\n            'equipements_en_ligne': equipements_en_ligne,\n            'equipements_hors_ligne': equipements_hors_ligne,\n            'alertes_non_lues': alertes_non_lues\n        }\n        \n        return render_template('dashboard.html', \n                             stats=stats, \n                             clients=clients,\n                             dernieres_alertes=dernieres_alertes)\n    except Exception as e:\n        logger.error(f\"Erreur dans dashboard: {e}\")\n        flash(f\"Erreur lors du chargement du tableau de bord: {e}\", \"error\")\n        return render_template('dashboard.html', stats={}, clients=[], dernieres_alertes=[])\n\n@app.route('/clients')\n@login_required\ndef clients():\n    \"\"\"Page de gestion des clients\"\"\"\n    try:\n        clients_list = Client.query.filter_by(actif=True).all()\n        return render_template('clients.html', clients=clients_list)\n    except Exception as e:\n        logger.error(f\"Erreur dans clients: {e}\")\n        flash(f\"Erreur lors du chargement des clients: {e}\", \"error\")\n        return render_template('clients.html', clients=[])\n\n@app.route('/equipements')\n@login_required\ndef equipements():\n    \"\"\"Page de gestion des √©quipements\"\"\"\n    try:\n        equipements_list = Equipement.query.filter_by(actif=True).all()\n        clients_list = Client.query.filter_by(actif=True).all()\n        return render_template('equipements.html', equipements=equipements_list, clients=clients_list)\n    except Exception as e:\n        logger.error(f\"Erreur dans equipements: {e}\")\n        flash(f\"Erreur lors du chargement des √©quipements: {e}\", \"error\")\n        return render_template('equipements.html', equipements=[], clients=[])\n\n@app.route('/historique')\n@login_required\ndef historique():\n    \"\"\"Page d'historique des pings\"\"\"\n    try:\n        page = request.args.get('page', 1, type=int)\n        per_page = 50\n        \n        historique_query = HistoriquePing.query.order_by(HistoriquePing.timestamp.desc())\n        historique_pagine = historique_query.paginate(\n            page=page, per_page=per_page, error_out=False\n        )\n        \n        return render_template('history.html', historique=historique_pagine)\n    except Exception as e:\n        logger.error(f\"Erreur dans historique: {e}\")\n        flash(f\"Erreur lors du chargement de l'historique: {e}\", \"error\")\n        return render_template('history.html', historique=None)\n\n@app.route('/alertes')\n@login_required\ndef alertes():\n    \"\"\"Page des alertes\"\"\"\n    try:\n        alertes_list = Alerte.query.order_by(Alerte.timestamp.desc()).all()\n        return render_template('alerts.html', alertes=alertes_list)\n    except Exception as e:\n        logger.error(f\"Erreur dans alertes: {e}\")\n        flash(f\"Erreur lors du chargement des alertes: {e}\", \"error\")\n        return render_template('alerts.html', alertes=[])\n\n# API Routes pour recevoir les pings des DVR/cam√©ras\n@app.route('/api/ping', methods=['POST'])\ndef recevoir_ping():\n    \"\"\"Endpoint pour recevoir les pings des √©quipements\"\"\"\n    try:\n        data = request.get_json()\n        \n        if not data:\n            return jsonify({\"error\": \"Donn√©es JSON requises\"}), 400\n        \n        adresse_ip = data.get('ip')\n        equipement_id = data.get('equipement_id')\n        \n        if not adresse_ip and not equipement_id:\n            return jsonify({\"error\": \"IP ou ID d'√©quipement requis\"}), 400\n        \n        # Trouver l'√©quipement\n        if equipement_id:\n            equipement = Equipement.query.get(equipement_id)\n        else:\n            equipement = Equipement.query.filter_by(adresse_ip=adresse_ip, actif=True).first()\n        \n        if not equipement:\n            logger.warning(f\"√âquipement non trouv√© pour IP: {adresse_ip}, ID: {equipement_id}\")\n            return jsonify({\"error\": \"√âquipement non trouv√©\"}), 404\n        \n        # V√©rifier si l'√©quipement √©tait hors ligne\n        etait_hors_ligne = not equipement.est_en_ligne\n        \n        # Mettre √† jour le dernier ping\n        equipement.dernier_ping = datetime.utcnow()\n        \n        # Enregistrer dans l'historique\n        historique = HistoriquePing()\n        historique.equipement_id = equipement.id\n        historique.timestamp = datetime.utcnow()\n        historique.statut = 'success'\n        historique.reponse_ms = data.get('response_time')\n        historique.message = data.get('message', 'Ping re√ßu avec succ√®s')\n        \n        db.session.add(historique)\n        \n        # Cr√©er une alerte si l'√©quipement revient en ligne\n        if etait_hors_ligne:\n            alerte = Alerte()\n            alerte.equipement_id = equipement.id\n            alerte.type_alerte = 'retour_en_ligne'\n            alerte.message = f\"L'√©quipement {equipement.nom} ({equipement.adresse_ip}) est revenu en ligne\"\n            alerte.timestamp = datetime.utcnow()\n            db.session.add(alerte)\n            logger.info(f\"√âquipement {equipement.nom} revenu en ligne\")\n        \n        db.session.commit()\n        \n        logger.debug(f\"Ping re√ßu pour {equipement.nom} ({equipement.adresse_ip})\")\n        \n        return jsonify({\n            \"status\": \"success\",\n            \"message\": \"Ping enregistr√© avec succ√®s\",\n            \"equipement\": {\n                \"id\": equipement.id,\n                \"nom\": equipement.nom,\n                \"statut\": equipement.statut_texte\n            }\n        })\n        \n    except Exception as e:\n        logger.error(f\"Erreur lors du traitement du ping: {e}\")\n        db.session.rollback()\n        return jsonify({\"error\": f\"Erreur interne: {str(e)}\"}), 500\n\n# API Routes pour l'interface web\n@app.route('/api/dashboard/stats')\ndef api_dashboard_stats():\n    \"\"\"API pour obtenir les statistiques du dashboard\"\"\"\n    try:\n        total_clients = Client.query.filter_by(actif=True).count()\n        total_equipements = Equipement.query.filter_by(actif=True).count()\n        \n        equipements_en_ligne = 0\n        equipements_hors_ligne = 0\n        \n        equipements = Equipement.query.filter_by(actif=True).all()\n        for eq in equipements:\n            if eq.est_en_ligne:\n                equipements_en_ligne += 1\n            else:\n                equipements_hors_ligne += 1\n        \n        alertes_non_lues = Alerte.query.filter_by(lue=False).count()\n        \n        return jsonify({\n            'total_clients': total_clients,\n            'total_equipements': total_equipements,\n            'equipements_en_ligne': equipements_en_ligne,\n            'equipements_hors_ligne': equipements_hors_ligne,\n            'alertes_non_lues': alertes_non_lues\n        })\n        \n    except Exception as e:\n        logger.error(f\"Erreur API dashboard stats: {e}\")\n        return jsonify({\"error\": str(e)}), 500\n\n@app.route('/api/equipements/statut')\ndef api_equipements_statut():\n    \"\"\"API pour obtenir le statut de tous les √©quipements\"\"\"\n    try:\n        equipements = Equipement.query.filter_by(actif=True).all()\n        \n        resultats = []\n        for eq in equipements:\n            resultats.append({\n                'id': eq.id,\n                'nom': eq.nom,\n                'type': eq.type_equipement,\n                'adresse_ip': eq.adresse_ip,\n                'client_nom': eq.client.nom,\n                'est_en_ligne': eq.est_en_ligne,\n                'statut_texte': eq.statut_texte,\n                'dernier_ping': eq.dernier_ping.isoformat() if eq.dernier_ping else None,\n                'duree_depuis_dernier_ping': eq.duree_depuis_dernier_ping\n            })\n        \n        return jsonify(resultats)\n        \n    except Exception as e:\n        logger.error(f\"Erreur API √©quipements statut: {e}\")\n        return jsonify({\"error\": str(e)}), 500\n\n@app.route('/api/alertes/marquer_lue/<int:alerte_id>', methods=['POST'])\ndef api_marquer_alerte_lue(alerte_id):\n    \"\"\"API pour marquer une alerte comme lue\"\"\"\n    try:\n        alerte = Alerte.query.get_or_404(alerte_id)\n        alerte.lue = True\n        db.session.commit()\n        \n        return jsonify({\"status\": \"success\", \"message\": \"Alerte marqu√©e comme lue\"})\n        \n    except Exception as e:\n        logger.error(f\"Erreur API marquer alerte lue: {e}\")\n        db.session.rollback()\n        return jsonify({\"error\": str(e)}), 500\n\n@app.route('/api/equipement/<int:equipement_id>/test-connexion', methods=['POST'])\ndef api_test_connexion(equipement_id):\n    \"\"\"API pour tester la connexion d'un √©quipement en simulant un ping\"\"\"\n    try:\n        equipement = Equipement.query.get_or_404(equipement_id)\n        \n        # Simuler un test de connexion en envoyant un ping test\n        import time\n        import random\n        \n        # Temps de r√©ponse simul√© (entre 20ms et 100ms)\n        response_time = round(random.uniform(20.0, 100.0), 1)\n        \n        # V√©rifier si l'√©quipement √©tait hors ligne\n        etait_hors_ligne = not equipement.est_en_ligne\n        \n        # Mettre √† jour le dernier ping\n        equipement.dernier_ping = datetime.utcnow()\n        \n        # Enregistrer dans l'historique\n        historique = HistoriquePing()\n        historique.equipement_id = equipement.id\n        historique.timestamp = datetime.utcnow()\n        historique.statut = 'success'\n        historique.reponse_ms = response_time\n        historique.message = f'Test de connexion manuel depuis l\\'interface web - {response_time}ms'\n        \n        db.session.add(historique)\n        \n        # Cr√©er une alerte si l'√©quipement revient en ligne\n        if etait_hors_ligne:\n            alerte = Alerte()\n            alerte.equipement_id = equipement.id\n            alerte.type_alerte = 'retour_en_ligne'\n            alerte.message = f\"L'√©quipement {equipement.nom} ({equipement.adresse_ip}) est revenu en ligne suite au test manuel\"\n            alerte.timestamp = datetime.utcnow()\n            db.session.add(alerte)\n            logger.info(f\"√âquipement {equipement.nom} revenu en ligne via test manuel\")\n        \n        db.session.commit()\n        \n        return jsonify({\n            \"status\": \"success\",\n            \"message\": f\"Test de connexion r√©ussi ({response_time}ms)\",\n            \"equipement\": {\n                \"id\": equipement.id,\n                \"nom\": equipement.nom,\n                \"adresse_ip\": equipement.adresse_ip,\n                \"statut\": equipement.statut_texte,\n                \"response_time\": response_time,\n                \"etait_hors_ligne\": etait_hors_ligne\n            }\n        })\n        \n    except Exception as e:\n        logger.error(f\"Erreur lors du test de connexion: {e}\")\n        db.session.rollback()\n        return jsonify({\"error\": f\"Erreur lors du test: {str(e)}\"}), 500\n\n# Routes pour ajouter des clients et √©quipements (gestion basique)\n@app.route('/ajouter_client', methods=['POST'])\ndef ajouter_client():\n    \"\"\"Ajouter un nouveau client\"\"\"\n    try:\n        nom = request.form.get('nom')\n        adresse = request.form.get('adresse', '')\n        telephone = request.form.get('telephone', '')\n        email = request.form.get('email', '')\n        \n        if not nom:\n            flash(\"Le nom du client est requis\", \"error\")\n            return redirect(url_for('clients'))\n        \n        client = Client()\n        client.nom = nom\n        client.adresse = adresse\n        client.telephone = telephone\n        client.email = email\n        \n        db.session.add(client)\n        db.session.commit()\n        \n        flash(f\"Client '{nom}' ajout√© avec succ√®s\", \"success\")\n        logger.info(f\"Nouveau client ajout√©: {nom}\")\n        \n        return redirect(url_for('clients'))\n        \n    except Exception as e:\n        logger.error(f\"Erreur lors de l'ajout du client: {e}\")\n        db.session.rollback()\n        flash(f\"Erreur lors de l'ajout du client: {e}\", \"error\")\n        return redirect(url_for('clients'))\n\n@app.route('/ajouter_equipement', methods=['POST'])\ndef ajouter_equipement():\n    \"\"\"Ajouter un nouvel √©quipement\"\"\"\n    try:\n        nom = request.form.get('nom')\n        type_equipement = request.form.get('type_equipement')\n        adresse_ip = request.form.get('adresse_ip')\n        port = request.form.get('port', 80, type=int)\n        client_id = request.form.get('client_id', type=int)\n        \n        if not all([nom, type_equipement, adresse_ip, client_id]):\n            flash(\"Tous les champs obligatoires doivent √™tre remplis\", \"error\")\n            return redirect(url_for('equipements'))\n        \n        # V√©rifier que le client existe\n        client = Client.query.get(client_id)\n        if not client:\n            flash(\"Client invalide\", \"error\")\n            return redirect(url_for('equipements'))\n        \n        equipement = Equipement()\n        equipement.nom = nom\n        equipement.type_equipement = type_equipement\n        equipement.adresse_ip = adresse_ip\n        equipement.port = port\n        equipement.client_id = client_id\n        \n        db.session.add(equipement)\n        db.session.commit()\n        \n        flash(f\"√âquipement '{nom}' ajout√© avec succ√®s\", \"success\")\n        logger.info(f\"Nouvel √©quipement ajout√©: {nom} ({adresse_ip})\")\n        \n        return redirect(url_for('equipements'))\n        \n    except Exception as e:\n        logger.error(f\"Erreur lors de l'ajout de l'√©quipement: {e}\")\n        db.session.rollback()\n        flash(f\"Erreur lors de l'ajout de l'√©quipement: {e}\", \"error\")\n        return redirect(url_for('equipements'))\n\n# Routes de gestion des utilisateurs (Admin seulement)\n@app.route('/admin/users')\n@login_required\ndef admin_users():\n    \"\"\"Page de gestion des utilisateurs (Admin seulement)\"\"\"\n    if current_user.role != 'admin':\n        flash('Acc√®s non autoris√©. Seuls les administrateurs peuvent acc√©der √† cette page.', 'error')\n        return redirect(url_for('dashboard'))\n    \n    # R√©cup√©rer tous les utilisateurs\n    users = User.query.order_by(User.date_creation.desc()).all()\n    \n    # Statistiques\n    total_users = User.query.count()\n    users_en_attente = User.query.filter_by(statut='en_attente').count()\n    users_approuves = User.query.filter_by(statut='approuve').count()\n    users_refuses = User.query.filter_by(statut='refuse').count()\n    \n    stats = {\n        'total': total_users,\n        'en_attente': users_en_attente,\n        'approuves': users_approuves,\n        'refuses': users_refuses\n    }\n    \n    return render_template('admin_users.html', users=users, stats=stats)\n\n@app.route('/admin/users/<int:user_id>/approve', methods=['POST'])\n@login_required\ndef approve_user(user_id):\n    \"\"\"Approuver un utilisateur\"\"\"\n    if current_user.role != 'admin':\n        flash('Acc√®s non autoris√©.', 'error')\n        return redirect(url_for('dashboard'))\n    \n    user = User.query.get_or_404(user_id)\n    \n    if user.statut == 'en_attente':\n        user.statut = 'approuve'\n        db.session.commit()\n        \n        # Envoyer email de notification\n        email_service.send_account_approval_notification(\n            user.email, \n            user.nom_complet or user.nom_utilisateur, \n            approved=True\n        )\n        \n        flash(f'Utilisateur {user.nom_utilisateur} approuv√© avec succ√®s. Email de notification envoy√©.', 'success')\n    else:\n        flash('Cet utilisateur n\\'est pas en attente d\\'approbation.', 'warning')\n    \n    return redirect(url_for('admin_users'))\n\n@app.route('/admin/users/<int:user_id>/reject', methods=['POST'])\n@login_required\ndef reject_user(user_id):\n    \"\"\"Rejeter un utilisateur\"\"\"\n    if current_user.role != 'admin':\n        flash('Acc√®s non autoris√©.', 'error')\n        return redirect(url_for('dashboard'))\n    \n    user = User.query.get_or_404(user_id)\n    \n    if user.statut == 'en_attente':\n        user.statut = 'refuse'\n        db.session.commit()\n        \n        # Envoyer email de notification\n        email_service.send_account_approval_notification(\n            user.email, \n            user.nom_complet or user.nom_utilisateur, \n            approved=False\n        )\n        \n        flash(f'Utilisateur {user.nom_utilisateur} refus√©. Email de notification envoy√©.', 'warning')\n    else:\n        flash('Cet utilisateur n\\'est pas en attente d\\'approbation.', 'warning')\n    \n    return redirect(url_for('admin_users'))\n","size_bytes":22145},"scheduler.py":{"content":"import logging\nfrom datetime import datetime, timedelta\nfrom apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.triggers.interval import IntervalTrigger\nfrom app import db\nfrom models import Equipement, Alerte\nfrom email_service import email_service\n\nlogger = logging.getLogger(__name__)\n\ndef verifier_equipements_hors_ligne():\n    \"\"\"V√©rifie p√©riodiquement les √©quipements hors ligne et g√©n√®re des alertes\"\"\"\n    from app import app\n    \n    with app.app_context():\n        try:\n            # D√©finir le seuil de timeout (2 minutes)\n            timeout = datetime.utcnow() - timedelta(minutes=2)\n            \n            # Trouver tous les √©quipements actifs\n            equipements = Equipement.query.filter_by(actif=True).all()\n            \n            for equipement in equipements:\n                # V√©rifier si l'√©quipement √©tait en ligne mais est maintenant hors ligne\n                etait_en_ligne = True\n                if equipement.dernier_ping is None or equipement.dernier_ping <= timeout:\n                    etait_en_ligne = False\n                \n                # V√©rifier s'il y a d√©j√† une alerte r√©cente pour cet √©quipement\n                alerte_recente = Alerte.query.filter_by(\n                    equipement_id=equipement.id,\n                    type_alerte='hors_ligne'\n                ).filter(\n                    Alerte.timestamp > datetime.utcnow() - timedelta(hours=1)\n                ).first()\n                \n                # Si l'√©quipement est hors ligne et qu'il n'y a pas d'alerte r√©cente\n                if not etait_en_ligne and not alerte_recente:\n                    # Cr√©er une nouvelle alerte\n                    alerte = Alerte(\n                        equipement_id=equipement.id,\n                        type_alerte='hors_ligne',\n                        message=f\"L'√©quipement {equipement.nom} ({equipement.adresse_ip}) du client {equipement.client.nom} est hors ligne depuis plus de 2 minutes\",\n                        timestamp=datetime.utcnow()\n                    )\n                    \n                    # Envoyer email d'alerte au client\n                    if equipement.client.email:\n                        email_service.send_equipment_offline_alert(\n                            client_email=equipement.client.email,\n                            client_name=equipement.client.nom,\n                            equipment_name=equipement.nom,\n                            equipment_type=equipement.type_equipement,\n                            equipment_ip=equipement.adresse_ip\n                        )\n                        logger.info(f\"Email d'alerte envoy√© √† {equipement.client.email} pour l'√©quipement {equipement.nom}\")\n                    \n                    db.session.add(alerte)\n                    logger.warning(f\"Alerte g√©n√©r√©e: {equipement.nom} hors ligne\")\n            \n            db.session.commit()\n            logger.debug(\"V√©rification des √©quipements hors ligne termin√©e\")\n            \n        except Exception as e:\n            logger.error(f\"Erreur lors de la v√©rification des √©quipements: {e}\")\n            db.session.rollback()\n\ndef nettoyer_historique():\n    \"\"\"Nettoie l'historique ancien pour √©viter l'accumulation excessive de donn√©es\"\"\"\n    from app import app\n    \n    with app.app_context():\n        try:\n            # Supprimer les entr√©es d'historique plus anciennes que 30 jours\n            limite = datetime.utcnow() - timedelta(days=30)\n            \n            from models import HistoriquePing\n            \n            # Compter les entr√©es √† supprimer\n            nb_a_supprimer = HistoriquePing.query.filter(\n                HistoriquePing.timestamp < limite\n            ).count()\n            \n            if nb_a_supprimer > 0:\n                # Supprimer les entr√©es anciennes\n                HistoriquePing.query.filter(\n                    HistoriquePing.timestamp < limite\n                ).delete()\n                \n                db.session.commit()\n                logger.info(f\"Historique nettoy√©: {nb_a_supprimer} entr√©es supprim√©es\")\n            \n        except Exception as e:\n            logger.error(f\"Erreur lors du nettoyage de l'historique: {e}\")\n            db.session.rollback()\n\ndef nettoyer_alertes():\n    \"\"\"Nettoie les alertes anciennes d√©j√† lues\"\"\"\n    from app import app\n    \n    with app.app_context():\n        try:\n            # Supprimer les alertes lues plus anciennes que 7 jours\n            limite = datetime.utcnow() - timedelta(days=7)\n            \n            nb_a_supprimer = Alerte.query.filter(\n                Alerte.timestamp < limite,\n                Alerte.lue == True\n            ).count()\n            \n            if nb_a_supprimer > 0:\n                Alerte.query.filter(\n                    Alerte.timestamp < limite,\n                    Alerte.lue == True\n                ).delete()\n                \n                db.session.commit()\n                logger.info(f\"Alertes nettoy√©es: {nb_a_supprimer} alertes supprim√©es\")\n            \n        except Exception as e:\n            logger.error(f\"Erreur lors du nettoyage des alertes: {e}\")\n            db.session.rollback()\n\ndef init_scheduler(app):\n    \"\"\"Initialise le planificateur de t√¢ches\"\"\"\n    try:\n        scheduler = BackgroundScheduler()\n        \n        # V√©rifier les √©quipements hors ligne toutes les minutes\n        scheduler.add_job(\n            func=verifier_equipements_hors_ligne,\n            trigger=IntervalTrigger(minutes=1),\n            id='verifier_equipements',\n            name='V√©rifier √©quipements hors ligne',\n            replace_existing=True\n        )\n        \n        # Nettoyer l'historique tous les jours √† 2h du matin\n        scheduler.add_job(\n            func=nettoyer_historique,\n            trigger='cron',\n            hour=2,\n            minute=0,\n            id='nettoyer_historique',\n            name='Nettoyer historique ancien',\n            replace_existing=True\n        )\n        \n        # Nettoyer les alertes tous les jours √† 3h du matin\n        scheduler.add_job(\n            func=nettoyer_alertes,\n            trigger='cron',\n            hour=3,\n            minute=0,\n            id='nettoyer_alertes',\n            name='Nettoyer alertes anciennes',\n            replace_existing=True\n        )\n        \n        # D√©marrer le planificateur\n        scheduler.start()\n        \n        logger.info(\"Planificateur de t√¢ches initialis√© avec succ√®s\")\n        \n        # Arr√™ter le planificateur proprement lors de l'arr√™t de l'application\n        import atexit\n        atexit.register(lambda: scheduler.shutdown())\n        \n    except Exception as e:\n        logger.error(f\"Erreur lors de l'initialisation du planificateur: {e}\")\n","size_bytes":6751},"simulateur_camera.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nSimulateur de cam√©ra/DVR - Envoie des pings p√©riodiques vers le serveur de monitoring\n\"\"\"\nimport requests\nimport time\nimport json\nimport random\nfrom datetime import datetime\n\nclass SimulateurCamera:\n    def __init__(self, serveur_monitoring, ma_ip, equipement_id, nom_equipement=\"Camera Simul√©e\"):\n        \"\"\"\n        Initialise le simulateur de cam√©ra\n        \n        Args:\n            serveur_monitoring: URL du serveur (ex: http://192.168.1.10:5000)\n            ma_ip: IP de cette machine qui simule la cam√©ra (ex: 192.168.1.100)\n            equipement_id: ID de l'√©quipement dans la base du serveur\n            nom_equipement: Nom pour l'affichage\n        \"\"\"\n        self.serveur_url = f\"{serveur_monitoring}/api/ping\"\n        self.ma_ip = ma_ip\n        self.equipement_id = equipement_id\n        self.nom = nom_equipement\n        self.actif = True\n        \n        print(f\"üîß Simulateur initialis√©:\")\n        print(f\"   Nom: {self.nom}\")\n        print(f\"   IP simul√©e: {self.ma_ip}\")\n        print(f\"   Serveur: {serveur_monitoring}\")\n        print(f\"   √âquipement ID: {self.equipement_id}\")\n    \n    def envoyer_ping(self):\n        \"\"\"Envoie un ping vers le serveur de monitoring\"\"\"\n        try:\n            # Temps de r√©ponse simul√© (comme une vraie cam√©ra)\n            response_time = round(random.uniform(20.0, 80.0), 1)\n            \n            # Donn√©es √† envoyer (format attendu par votre API)\n            data = {\n                \"ip\": self.ma_ip,\n                \"equipement_id\": self.equipement_id,\n                \"response_time\": response_time,\n                \"message\": f\"Ping depuis {self.nom} - Simulation PC\"\n            }\n            \n            print(f\"üì° {datetime.now().strftime('%H:%M:%S')} - Envoi ping...\")\n            \n            # Envoyer la requ√™te POST\n            response = requests.post(\n                self.serveur_url,\n                json=data,\n                headers={'Content-Type': 'application/json'},\n                timeout=10\n            )\n            \n            if response.status_code == 200:\n                result = response.json()\n                print(f\"   ‚úÖ Succ√®s ({response_time}ms) - Statut: {result.get('equipement', {}).get('statut', 'Inconnu')}\")\n            else:\n                print(f\"   ‚ùå Erreur HTTP {response.status_code}: {response.text}\")\n                \n        except requests.exceptions.ConnectionError:\n            print(f\"   ‚ùå Impossible de contacter le serveur {self.serveur_url}\")\n        except requests.exceptions.Timeout:\n            print(f\"   ‚è±Ô∏è Timeout - serveur trop lent\")\n        except Exception as e:\n            print(f\"   ‚ùå Erreur: {e}\")\n    \n    def demarrer_simulation(self, intervalle_secondes=60):\n        \"\"\"\n        D√©marre la simulation en boucle infinie\n        \n        Args:\n            intervalle_secondes: D√©lai entre chaque ping (d√©faut: 60s comme une vraie cam√©ra)\n        \"\"\"\n        print(f\"\\nüöÄ D√©marrage de la simulation (ping toutes les {intervalle_secondes}s)\")\n        print(\"   Appuyez sur Ctrl+C pour arr√™ter\")\n        print(\"-\" * 60)\n        \n        try:\n            # Premier ping imm√©diat\n            self.envoyer_ping()\n            \n            # Boucle principale\n            while self.actif:\n                time.sleep(intervalle_secondes)\n                self.envoyer_ping()\n                \n        except KeyboardInterrupt:\n            print(f\"\\n‚èπÔ∏è Simulation arr√™t√©e par l'utilisateur\")\n        except Exception as e:\n            print(f\"\\n‚ùå Erreur fatale: {e}\")\n\ndef main():\n    \"\"\"Interface de configuration\"\"\"\n    print(\"üé≠ Simulateur de Cam√©ra/DVR pour Monitoring\")\n    print(\"=\" * 50)\n    \n    # Configuration par d√©faut\n    serveur_defaut = \"http://localhost:5000\"\n    ip_defaut = \"192.168.1.100\"\n    id_defaut = 1\n    \n    print(\"\\nüìã Configuration:\")\n    serveur = input(f\"URL du serveur monitoring [{serveur_defaut}]: \").strip() or serveur_defaut\n    ip_camera = input(f\"IP de cette machine (cam√©ra simul√©e) [{ip_defaut}]: \").strip() or ip_defaut\n    \n    try:\n        equipement_id = int(input(f\"ID de l'√©quipement [{id_defaut}]: \").strip() or id_defaut)\n    except ValueError:\n        equipement_id = id_defaut\n    \n    nom = input(\"Nom de la cam√©ra [Camera Test]: \").strip() or \"Camera Test\"\n    \n    try:\n        intervalle = int(input(\"Intervalle entre pings (secondes) [60]: \").strip() or 60)\n    except ValueError:\n        intervalle = 60\n    \n    # Test de connexion initial\n    print(f\"\\nüîç Test de connexion vers {serveur}...\")\n    try:\n        response = requests.get(f\"{serveur.rstrip('/api/ping')}\", timeout=5)\n        print(\"   ‚úÖ Serveur accessible\")\n    except Exception as e:\n        print(f\"   ‚ö†Ô∏è Attention: {e}\")\n        continuer = input(\"Continuer quand m√™me ? (o/N): \").strip().lower()\n        if continuer not in ['o', 'oui', 'y', 'yes']:\n            return\n    \n    # Cr√©er et d√©marrer le simulateur\n    simulateur = SimulateurCamera(serveur, ip_camera, equipement_id, nom)\n    simulateur.demarrer_simulation(intervalle)\n\nif __name__ == \"__main__\":\n    main()\n","size_bytes":5121},"test_ping.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nScript pour tester l'API de ping du syst√®me de monitoring\n\"\"\"\nimport requests\nimport json\nimport time\nfrom datetime import datetime\n\ndef test_ping_equipement():\n    \"\"\"Teste l'envoi d'un ping vers l'API\"\"\"\n    \n    # URL de votre serveur (ajustez selon votre configuration)\n    base_url = \"http://localhost:5000\"\n    ping_url = f\"{base_url}/api/ping\"\n    \n    print(\"üîÑ Test de l'API de ping\")\n    print(\"=\" * 40)\n    \n    # Donn√©es de test pour votre √©quipement DVR\n    ping_data = {\n        \"ip\": \"192.144.11.1\",\n        \"equipement_id\": 1,  # ID de votre DVR dans la base\n        \"response_time\": 45.5,\n        \"message\": \"DVR en ligne - Test manuel\"\n    }\n    \n    print(f\"üì° Envoi du ping vers: {ping_url}\")\n    print(f\"üìä Donn√©es: {json.dumps(ping_data, indent=2)}\")\n    \n    try:\n        # Envoyer la requ√™te POST\n        response = requests.post(\n            ping_url,\n            json=ping_data,\n            headers={'Content-Type': 'application/json'},\n            timeout=10\n        )\n        \n        print(f\"üìà Status code: {response.status_code}\")\n        \n        if response.status_code == 200:\n            result = response.json()\n            print(\"‚úÖ SUCC√àS! Ping enregistr√©\")\n            print(f\"üìÑ R√©ponse: {json.dumps(result, indent=2)}\")\n            \n            # V√©rifier le statut via l'API\n            print(\"\\nüîç V√©rification du statut...\")\n            status_url = f\"{base_url}/api/equipements/statut\"\n            status_response = requests.get(status_url)\n            \n            if status_response.status_code == 200:\n                equipements = status_response.json()\n                for eq in equipements:\n                    if eq.get('id') == 1:\n                        statut = \"üü¢ EN LIGNE\" if eq.get('est_en_ligne') else \"üî¥ HORS LIGNE\"\n                        print(f\"   √âquipement {eq.get('nom')}: {statut}\")\n                        if eq.get('dernier_ping'):\n                            print(f\"   Dernier ping: {eq.get('dernier_ping')}\")\n            \n        else:\n            print(f\"‚ùå ERREUR: {response.status_code}\")\n            print(f\"üìÑ R√©ponse: {response.text}\")\n            \n    except requests.exceptions.ConnectionError:\n        print(\"‚ùå ERREUR: Impossible de se connecter au serveur\")\n        print(\"   V√©rifiez que l'application est d√©marr√©e sur localhost:5000\")\n    except requests.exceptions.Timeout:\n        print(\"‚ùå ERREUR: Timeout de la requ√™te\")\n    except Exception as e:\n        print(f\"‚ùå ERREUR inattendue: {e}\")\n\ndef test_multiple_pings():\n    \"\"\"Teste plusieurs pings cons√©cutifs\"\"\"\n    print(\"\\nüîÑ Test de pings multiples\")\n    print(\"=\" * 40)\n    \n    base_url = \"http://localhost:5000\"\n    ping_url = f\"{base_url}/api/ping\"\n    \n    # Simuler plusieurs √©quipements\n    equipements_test = [\n        {\"ip\": \"192.144.11.1\", \"equipement_id\": 1, \"response_time\": 45.5, \"message\": \"DVR Principal OK\"},\n        {\"ip\": \"192.168.1.101\", \"equipement_id\": 2, \"response_time\": 32.1, \"message\": \"Cam√©ra Entr√©e OK\"},\n        {\"ip\": \"192.168.1.102\", \"equipement_id\": 3, \"response_time\": 28.9, \"message\": \"Cam√©ra Parking OK\"},\n    ]\n    \n    for i, data in enumerate(equipements_test, 1):\n        print(f\"\\nüì° Ping {i}/3: {data['ip']}\")\n        \n        try:\n            response = requests.post(ping_url, json=data, timeout=5)\n            \n            if response.status_code == 200:\n                print(f\"   ‚úÖ Succ√®s ({data['response_time']}ms)\")\n            else:\n                print(f\"   ‚ùå √âchec: {response.status_code}\")\n                \n        except Exception as e:\n            print(f\"   ‚ùå Erreur: {e}\")\n        \n        # Pause entre les pings\n        time.sleep(1)\n\ndef test_avec_curl():\n    \"\"\"Affiche les commandes curl √©quivalentes\"\"\"\n    print(\"\\nüñ•Ô∏è  Commandes curl √©quivalentes\")\n    print(\"=\" * 40)\n    \n    curl_cmd = '''curl -X POST http://localhost:5000/api/ping \\\\\n  -H \"Content-Type: application/json\" \\\\\n  -d '{\n    \"ip\": \"192.144.11.1\",\n    \"equipement_id\": 1,\n    \"response_time\": 45.5,\n    \"message\": \"Test curl\"\n  }' '''\n    \n    print(\"Pour tester manuellement avec curl:\")\n    print(curl_cmd)\n    \n    # Version PowerShell\n    ps_cmd = '''Invoke-RestMethod -Uri \"http://localhost:5000/api/ping\" `\n  -Method POST `\n  -ContentType \"application/json\" `\n  -Body '{\"ip\":\"192.144.11.1\",\"equipement_id\":1,\"response_time\":45.5,\"message\":\"Test PowerShell\"}'\n'''\n    \n    print(\"\\nPour tester avec PowerShell:\")\n    print(ps_cmd)\n\nif __name__ == \"__main__\":\n    print(\"üîß Test de l'API de monitoring des cam√©ras\")\n    print(\"=\" * 50)\n    \n    # Test simple\n    test_ping_equipement()\n    \n    # Test multiple (optionnel)\n    response = input(\"\\n‚ùì Voulez-vous tester plusieurs pings ? (o/n): \")\n    if response.lower() in ['o', 'oui', 'y', 'yes']:\n        test_multiple_pings()\n    \n    # Afficher les alternatives\n    test_avec_curl()\n    \n    print(\"\\n‚úÖ Tests termin√©s!\")\n    print(\"üì± Rafra√Æchissez votre page web pour voir les changements\")\n","size_bytes":5027},"attached_assets/app_1754599743180.py":{"content":"import os\nimport logging\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\n\ndb = SQLAlchemy()\n\n# Create the app\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\", \"dev-secret-key-change-in-production\")\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n\n# Configure the database\ndatabase_url = os.environ.get(\"DATABASE_URL\")\nif database_url and database_url.startswith(\"postgres://\"):\n    database_url = database_url.replace(\"postgres://\", \"postgresql://\", 1)\n\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:///monitoring_local.db\"\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    \"pool_recycle\": 300,\n    \"pool_pre_ping\": True,\n}\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\n\n# Initialize the app with the extension\ndb.init_app(app)\n\n# Import models and routes\nimport models\nimport routes\n\n# Initialize database and scheduler in a function\ndef init_app():\n    with app.app_context():\n        db.create_all()\n        from scheduler import init_scheduler\n        init_scheduler(app)\n\n# Only initialize if this is the main execution\nif __name__ != '__main__':\n    init_app()\n\nlogger = logging.getLogger(__name__)\nlogger.info(\"Application initialized successfully\")\n","size_bytes":1400},"attached_assets/main_1754599839744.py":{"content":"from app import app, init_app\n\nif __name__ == \"__main__\":\n    init_app()\n    app.run(host=\"0.0.0.0\", port=5000, debug=True)\n","size_bytes":124},"attached_assets/models_1754599843723.py":{"content":"from datetime import datetime, timedelta\nfrom app import db\nfrom sqlalchemy import func\n\nclass Client(db.Model):\n    __tablename__ = 'clients'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    nom = db.Column(db.String(100), nullable=False)\n    adresse = db.Column(db.Text)\n    telephone = db.Column(db.String(20))\n    email = db.Column(db.String(100))\n    date_creation = db.Column(db.DateTime, default=datetime.utcnow)\n    actif = db.Column(db.Boolean, default=True)\n    \n    # Relation avec les √©quipements\n    equipements = db.relationship('Equipement', backref='client', lazy=True, cascade='all, delete-orphan')\n    \n    def __repr__(self):\n        return f'<Client {self.nom}>'\n    \n    @property\n    def nb_equipements_total(self):\n        return db.session.query(Equipement).filter_by(client_id=self.id, actif=True).count()\n    \n    @property\n    def nb_equipements_en_ligne(self):\n        equipements = db.session.query(Equipement).filter_by(client_id=self.id, actif=True).all()\n        return len([eq for eq in equipements if eq.est_en_ligne])\n    \n    @property\n    def nb_equipements_hors_ligne(self):\n        equipements = db.session.query(Equipement).filter_by(client_id=self.id, actif=True).all()\n        return len([eq for eq in equipements if not eq.est_en_ligne])\n\nclass Equipement(db.Model):\n    __tablename__ = 'equipements'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    nom = db.Column(db.String(100), nullable=False)\n    type_equipement = db.Column(db.String(50), nullable=False)  # DVR, Camera, etc.\n    adresse_ip = db.Column(db.String(45), nullable=False)\n    port = db.Column(db.Integer, default=80)\n    client_id = db.Column(db.Integer, db.ForeignKey('clients.id'), nullable=False)\n    dernier_ping = db.Column(db.DateTime)\n    date_creation = db.Column(db.DateTime, default=datetime.utcnow)\n    actif = db.Column(db.Boolean, default=True)\n    \n    # Relation avec l'historique des pings\n    historique_pings = db.relationship('HistoriquePing', backref='equipement', lazy=True, cascade='all, delete-orphan')\n    \n    def __repr__(self):\n        return f'<Equipement {self.nom} - {self.adresse_ip}>'\n    \n    @property\n    def est_en_ligne(self):\n        \"\"\"V√©rifie si l'√©quipement est consid√©r√© comme en ligne (ping < 2 minutes)\"\"\"\n        if not self.dernier_ping:\n            return False\n        \n        timeout = datetime.utcnow() - timedelta(minutes=2)\n        return self.dernier_ping > timeout\n    \n    @property\n    def statut_texte(self):\n        return \"En ligne\" if self.est_en_ligne else \"Hors ligne\"\n    \n    @property\n    def duree_depuis_dernier_ping(self):\n        \"\"\"Retourne la dur√©e depuis le dernier ping en format lisible\"\"\"\n        if not self.dernier_ping:\n            return \"Jamais\"\n        \n        delta = datetime.utcnow() - self.dernier_ping\n        \n        if delta.days > 0:\n            return f\"{delta.days} jour(s)\"\n        elif delta.seconds > 3600:\n            heures = delta.seconds // 3600\n            return f\"{heures} heure(s)\"\n        elif delta.seconds > 60:\n            minutes = delta.seconds // 60\n            return f\"{minutes} minute(s)\"\n        else:\n            return \"< 1 minute\"\n\nclass HistoriquePing(db.Model):\n    __tablename__ = 'historique_pings'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    equipement_id = db.Column(db.Integer, db.ForeignKey('equipements.id'), nullable=False)\n    timestamp = db.Column(db.DateTime, default=datetime.utcnow)\n    statut = db.Column(db.String(20), nullable=False)  # 'success', 'timeout', 'error'\n    reponse_ms = db.Column(db.Integer)  # Temps de r√©ponse en millisecondes\n    message = db.Column(db.Text)\n    \n    def __repr__(self):\n        return f'<HistoriquePing {self.equipement_id} - {self.statut} - {self.timestamp}>'\n\nclass Alerte(db.Model):\n    __tablename__ = 'alertes'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    equipement_id = db.Column(db.Integer, db.ForeignKey('equipements.id'), nullable=False)\n    type_alerte = db.Column(db.String(50), nullable=False)  # 'hors_ligne', 'retour_en_ligne'\n    message = db.Column(db.Text, nullable=False)\n    timestamp = db.Column(db.DateTime, default=datetime.utcnow)\n    lue = db.Column(db.Boolean, default=False)\n    \n    # Relation avec l'√©quipement\n    equipement = db.relationship('Equipement', backref='alertes')\n    \n    def __repr__(self):\n        return f'<Alerte {self.type_alerte} - {self.equipement_id}>'\n","size_bytes":4440},"attached_assets/routes_1754599854625.py":{"content":"import logging\nfrom datetime import datetime, timedelta\nfrom flask import render_template, request, jsonify, flash, redirect, url_for\nfrom app import app, db\nfrom models import Client, Equipement, HistoriquePing, Alerte\n\nlogger = logging.getLogger(__name__)\n\n@app.route('/')\ndef dashboard():\n    \"\"\"Page d'accueil avec vue d'ensemble du syst√®me\"\"\"\n    try:\n        # Statistiques globales\n        total_clients = Client.query.filter_by(actif=True).count()\n        total_equipements = Equipement.query.filter_by(actif=True).count()\n        \n        # Compter les √©quipements en ligne et hors ligne\n        equipements_en_ligne = 0\n        equipements_hors_ligne = 0\n        \n        equipements = Equipement.query.filter_by(actif=True).all()\n        for eq in equipements:\n            if eq.est_en_ligne:\n                equipements_en_ligne += 1\n            else:\n                equipements_hors_ligne += 1\n        \n        # Alertes non lues\n        alertes_non_lues = Alerte.query.filter_by(lue=False).count()\n        \n        # Derni√®res alertes\n        dernieres_alertes = Alerte.query.order_by(Alerte.timestamp.desc()).limit(10).all()\n        \n        # Clients avec leurs √©quipements\n        clients = Client.query.filter_by(actif=True).all()\n        \n        stats = {\n            'total_clients': total_clients,\n            'total_equipements': total_equipements,\n            'equipements_en_ligne': equipements_en_ligne,\n            'equipements_hors_ligne': equipements_hors_ligne,\n            'alertes_non_lues': alertes_non_lues\n        }\n        \n        return render_template('dashboard.html', \n                             stats=stats, \n                             clients=clients,\n                             dernieres_alertes=dernieres_alertes)\n    except Exception as e:\n        logger.error(f\"Erreur dans dashboard: {e}\")\n        flash(f\"Erreur lors du chargement du tableau de bord: {e}\", \"error\")\n        return render_template('dashboard.html', stats={}, clients=[], dernieres_alertes=[])\n\n@app.route('/clients')\ndef clients():\n    \"\"\"Page de gestion des clients\"\"\"\n    try:\n        clients_list = Client.query.filter_by(actif=True).all()\n        return render_template('clients.html', clients=clients_list)\n    except Exception as e:\n        logger.error(f\"Erreur dans clients: {e}\")\n        flash(f\"Erreur lors du chargement des clients: {e}\", \"error\")\n        return render_template('clients.html', clients=[])\n\n@app.route('/equipements')\ndef equipements():\n    \"\"\"Page de gestion des √©quipements\"\"\"\n    try:\n        equipements_list = Equipement.query.filter_by(actif=True).all()\n        clients_list = Client.query.filter_by(actif=True).all()\n        return render_template('equipements.html', equipements=equipements_list, clients=clients_list)\n    except Exception as e:\n        logger.error(f\"Erreur dans equipements: {e}\")\n        flash(f\"Erreur lors du chargement des √©quipements: {e}\", \"error\")\n        return render_template('equipements.html', equipements=[], clients=[])\n\n@app.route('/historique')\ndef historique():\n    \"\"\"Page d'historique des pings\"\"\"\n    try:\n        page = request.args.get('page', 1, type=int)\n        per_page = 50\n        \n        historique_query = HistoriquePing.query.order_by(HistoriquePing.timestamp.desc())\n        historique_pagine = historique_query.paginate(\n            page=page, per_page=per_page, error_out=False\n        )\n        \n        return render_template('history.html', historique=historique_pagine)\n    except Exception as e:\n        logger.error(f\"Erreur dans historique: {e}\")\n        flash(f\"Erreur lors du chargement de l'historique: {e}\", \"error\")\n        return render_template('history.html', historique=None)\n\n@app.route('/alertes')\ndef alertes():\n    \"\"\"Page des alertes\"\"\"\n    try:\n        alertes_list = Alerte.query.order_by(Alerte.timestamp.desc()).all()\n        return render_template('alerts.html', alertes=alertes_list)\n    except Exception as e:\n        logger.error(f\"Erreur dans alertes: {e}\")\n        flash(f\"Erreur lors du chargement des alertes: {e}\", \"error\")\n        return render_template('alerts.html', alertes=[])\n\n# API Routes pour recevoir les pings des DVR/cam√©ras\n@app.route('/api/ping', methods=['POST'])\ndef recevoir_ping():\n    \"\"\"Endpoint pour recevoir les pings des √©quipements\"\"\"\n    try:\n        data = request.get_json()\n        \n        if not data:\n            return jsonify({\"error\": \"Donn√©es JSON requises\"}), 400\n        \n        adresse_ip = data.get('ip')\n        equipement_id = data.get('equipement_id')\n        \n        if not adresse_ip and not equipement_id:\n            return jsonify({\"error\": \"IP ou ID d'√©quipement requis\"}), 400\n        \n        # Trouver l'√©quipement\n        if equipement_id:\n            equipement = Equipement.query.get(equipement_id)\n        else:\n            equipement = Equipement.query.filter_by(adresse_ip=adresse_ip, actif=True).first()\n        \n        if not equipement:\n            logger.warning(f\"√âquipement non trouv√© pour IP: {adresse_ip}, ID: {equipement_id}\")\n            return jsonify({\"error\": \"√âquipement non trouv√©\"}), 404\n        \n        # V√©rifier si l'√©quipement √©tait hors ligne\n        etait_hors_ligne = not equipement.est_en_ligne\n        \n        # Mettre √† jour le dernier ping\n        equipement.dernier_ping = datetime.utcnow()\n        \n        # Enregistrer dans l'historique\n        historique = HistoriquePing()\n        historique.equipement_id = equipement.id\n        historique.timestamp = datetime.utcnow()\n        historique.statut = 'success'\n        historique.reponse_ms = data.get('response_time')\n        historique.message = data.get('message', 'Ping re√ßu avec succ√®s')\n        \n        db.session.add(historique)\n        \n        # Cr√©er une alerte si l'√©quipement revient en ligne\n        if etait_hors_ligne:\n            alerte = Alerte()\n            alerte.equipement_id = equipement.id\n            alerte.type_alerte = 'retour_en_ligne'\n            alerte.message = f\"L'√©quipement {equipement.nom} ({equipement.adresse_ip}) est revenu en ligne\"\n            alerte.timestamp = datetime.utcnow()\n            db.session.add(alerte)\n            logger.info(f\"√âquipement {equipement.nom} revenu en ligne\")\n        \n        db.session.commit()\n        \n        logger.debug(f\"Ping re√ßu pour {equipement.nom} ({equipement.adresse_ip})\")\n        \n        return jsonify({\n            \"status\": \"success\",\n            \"message\": \"Ping enregistr√© avec succ√®s\",\n            \"equipement\": {\n                \"id\": equipement.id,\n                \"nom\": equipement.nom,\n                \"statut\": equipement.statut_texte\n            }\n        })\n        \n    except Exception as e:\n        logger.error(f\"Erreur lors du traitement du ping: {e}\")\n        db.session.rollback()\n        return jsonify({\"error\": f\"Erreur interne: {str(e)}\"}), 500\n\n# API Routes pour l'interface web\n@app.route('/api/dashboard/stats')\ndef api_dashboard_stats():\n    \"\"\"API pour obtenir les statistiques du dashboard\"\"\"\n    try:\n        total_clients = Client.query.filter_by(actif=True).count()\n        total_equipements = Equipement.query.filter_by(actif=True).count()\n        \n        equipements_en_ligne = 0\n        equipements_hors_ligne = 0\n        \n        equipements = Equipement.query.filter_by(actif=True).all()\n        for eq in equipements:\n            if eq.est_en_ligne:\n                equipements_en_ligne += 1\n            else:\n                equipements_hors_ligne += 1\n        \n        alertes_non_lues = Alerte.query.filter_by(lue=False).count()\n        \n        return jsonify({\n            'total_clients': total_clients,\n            'total_equipements': total_equipements,\n            'equipements_en_ligne': equipements_en_ligne,\n            'equipements_hors_ligne': equipements_hors_ligne,\n            'alertes_non_lues': alertes_non_lues\n        })\n        \n    except Exception as e:\n        logger.error(f\"Erreur API dashboard stats: {e}\")\n        return jsonify({\"error\": str(e)}), 500\n\n@app.route('/api/equipements/statut')\ndef api_equipements_statut():\n    \"\"\"API pour obtenir le statut de tous les √©quipements\"\"\"\n    try:\n        equipements = Equipement.query.filter_by(actif=True).all()\n        \n        resultats = []\n        for eq in equipements:\n            resultats.append({\n                'id': eq.id,\n                'nom': eq.nom,\n                'type': eq.type_equipement,\n                'adresse_ip': eq.adresse_ip,\n                'client_nom': eq.client.nom,\n                'est_en_ligne': eq.est_en_ligne,\n                'statut_texte': eq.statut_texte,\n                'dernier_ping': eq.dernier_ping.isoformat() if eq.dernier_ping else None,\n                'duree_depuis_dernier_ping': eq.duree_depuis_dernier_ping\n            })\n        \n        return jsonify(resultats)\n        \n    except Exception as e:\n        logger.error(f\"Erreur API √©quipements statut: {e}\")\n        return jsonify({\"error\": str(e)}), 500\n\n@app.route('/api/alertes/marquer_lue/<int:alerte_id>', methods=['POST'])\ndef api_marquer_alerte_lue(alerte_id):\n    \"\"\"API pour marquer une alerte comme lue\"\"\"\n    try:\n        alerte = Alerte.query.get_or_404(alerte_id)\n        alerte.lue = True\n        db.session.commit()\n        \n        return jsonify({\"status\": \"success\", \"message\": \"Alerte marqu√©e comme lue\"})\n        \n    except Exception as e:\n        logger.error(f\"Erreur API marquer alerte lue: {e}\")\n        db.session.rollback()\n        return jsonify({\"error\": str(e)}), 500\n\n@app.route('/api/equipement/<int:equipement_id>/test-connexion', methods=['POST'])\ndef api_test_connexion(equipement_id):\n    \"\"\"API pour tester la connexion d'un √©quipement en simulant un ping\"\"\"\n    try:\n        equipement = Equipement.query.get_or_404(equipement_id)\n        \n        # Simuler un test de connexion en envoyant un ping test\n        import time\n        import random\n        \n        # Temps de r√©ponse simul√© (entre 20ms et 100ms)\n        response_time = round(random.uniform(20.0, 100.0), 1)\n        \n        # V√©rifier si l'√©quipement √©tait hors ligne\n        etait_hors_ligne = not equipement.est_en_ligne\n        \n        # Mettre √† jour le dernier ping\n        equipement.dernier_ping = datetime.utcnow()\n        \n        # Enregistrer dans l'historique\n        historique = HistoriquePing()\n        historique.equipement_id = equipement.id\n        historique.timestamp = datetime.utcnow()\n        historique.statut = 'success'\n        historique.reponse_ms = response_time\n        historique.message = f'Test de connexion manuel depuis l\\'interface web - {response_time}ms'\n        \n        db.session.add(historique)\n        \n        # Cr√©er une alerte si l'√©quipement revient en ligne\n        if etait_hors_ligne:\n            alerte = Alerte()\n            alerte.equipement_id = equipement.id\n            alerte.type_alerte = 'retour_en_ligne'\n            alerte.message = f\"L'√©quipement {equipement.nom} ({equipement.adresse_ip}) est revenu en ligne suite au test manuel\"\n            alerte.timestamp = datetime.utcnow()\n            db.session.add(alerte)\n            logger.info(f\"√âquipement {equipement.nom} revenu en ligne via test manuel\")\n        \n        db.session.commit()\n        \n        return jsonify({\n            \"status\": \"success\",\n            \"message\": f\"Test de connexion r√©ussi ({response_time}ms)\",\n            \"equipement\": {\n                \"id\": equipement.id,\n                \"nom\": equipement.nom,\n                \"adresse_ip\": equipement.adresse_ip,\n                \"statut\": equipement.statut_texte,\n                \"response_time\": response_time,\n                \"etait_hors_ligne\": etait_hors_ligne\n            }\n        })\n        \n    except Exception as e:\n        logger.error(f\"Erreur lors du test de connexion: {e}\")\n        db.session.rollback()\n        return jsonify({\"error\": f\"Erreur lors du test: {str(e)}\"}), 500\n\n# Routes pour ajouter des clients et √©quipements (gestion basique)\n@app.route('/ajouter_client', methods=['POST'])\ndef ajouter_client():\n    \"\"\"Ajouter un nouveau client\"\"\"\n    try:\n        nom = request.form.get('nom')\n        adresse = request.form.get('adresse', '')\n        telephone = request.form.get('telephone', '')\n        email = request.form.get('email', '')\n        \n        if not nom:\n            flash(\"Le nom du client est requis\", \"error\")\n            return redirect(url_for('clients'))\n        \n        client = Client()\n        client.nom = nom\n        client.adresse = adresse\n        client.telephone = telephone\n        client.email = email\n        \n        db.session.add(client)\n        db.session.commit()\n        \n        flash(f\"Client '{nom}' ajout√© avec succ√®s\", \"success\")\n        logger.info(f\"Nouveau client ajout√©: {nom}\")\n        \n    except Exception as e:\n        logger.error(f\"Erreur lors de l'ajout du client: {e}\")\n        db.session.rollback()\n        flash(f\"Erreur lors de l'ajout du client: {e}\", \"error\")\n    \n    return redirect(url_for('clients'))\n\n@app.route('/ajouter_equipement', methods=['POST'])\ndef ajouter_equipement():\n    \"\"\"Ajouter un nouvel √©quipement\"\"\"\n    try:\n        nom = request.form.get('nom')\n        type_equipement = request.form.get('type_equipement')\n        adresse_ip = request.form.get('adresse_ip')\n        port = request.form.get('port', 80, type=int)\n        client_id = request.form.get('client_id', type=int)\n        \n        if not all([nom, type_equipement, adresse_ip, client_id]):\n            flash(\"Tous les champs sont requis\", \"error\")\n            return redirect(url_for('equipements'))\n        \n        equipement = Equipement()\n        equipement.nom = nom\n        equipement.type_equipement = type_equipement\n        equipement.adresse_ip = adresse_ip\n        equipement.port = port\n        equipement.client_id = client_id\n        \n        db.session.add(equipement)\n        db.session.commit()\n        \n        flash(f\"√âquipement '{nom}' ajout√© avec succ√®s\", \"success\")\n        logger.info(f\"Nouvel √©quipement ajout√©: {nom} ({adresse_ip})\")\n        \n    except Exception as e:\n        logger.error(f\"Erreur lors de l'ajout de l'√©quipement: {e}\")\n        db.session.rollback()\n        flash(f\"Erreur lors de l'ajout de l'√©quipement: {e}\", \"error\")\n    \n    return redirect(url_for('equipements'))\n\n@app.errorhandler(404)\ndef not_found_error(error):\n    return render_template('404.html'), 404\n\n@app.errorhandler(500)\ndef internal_error(error):\n    db.session.rollback()\n    return render_template('500.html'), 500\n","size_bytes":14544},"attached_assets/scheduler_1754599861198.py":{"content":"import logging\nfrom datetime import datetime, timedelta\nfrom apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.triggers.interval import IntervalTrigger\nfrom app import db\nfrom models import Equipement, Alerte\n\nlogger = logging.getLogger(__name__)\n\ndef verifier_equipements_hors_ligne():\n    \"\"\"V√©rifie p√©riodiquement les √©quipements hors ligne et g√©n√®re des alertes\"\"\"\n    from app import app\n    \n    with app.app_context():\n        try:\n            # D√©finir le seuil de timeout (2 minutes)\n            timeout = datetime.utcnow() - timedelta(minutes=2)\n            \n            # Trouver tous les √©quipements actifs\n            equipements = Equipement.query.filter_by(actif=True).all()\n            \n            for equipement in equipements:\n                # V√©rifier si l'√©quipement √©tait en ligne mais est maintenant hors ligne\n                etait_en_ligne = True\n                if equipement.dernier_ping is None or equipement.dernier_ping <= timeout:\n                    etait_en_ligne = False\n                \n                # V√©rifier s'il y a d√©j√† une alerte r√©cente pour cet √©quipement\n                alerte_recente = Alerte.query.filter_by(\n                    equipement_id=equipement.id,\n                    type_alerte='hors_ligne'\n                ).filter(\n                    Alerte.timestamp > datetime.utcnow() - timedelta(hours=1)\n                ).first()\n                \n                # Si l'√©quipement est hors ligne et qu'il n'y a pas d'alerte r√©cente\n                if not etait_en_ligne and not alerte_recente:\n                    # Cr√©er une nouvelle alerte\n                    alerte = Alerte(\n                        equipement_id=equipement.id,\n                        type_alerte='hors_ligne',\n                        message=f\"L'√©quipement {equipement.nom} ({equipement.adresse_ip}) du client {equipement.client.nom} est hors ligne depuis plus de 2 minutes\",\n                        timestamp=datetime.utcnow()\n                    )\n                    \n                    db.session.add(alerte)\n                    logger.warning(f\"Alerte g√©n√©r√©e: {equipement.nom} hors ligne\")\n            \n            db.session.commit()\n            logger.debug(\"V√©rification des √©quipements hors ligne termin√©e\")\n            \n        except Exception as e:\n            logger.error(f\"Erreur lors de la v√©rification des √©quipements: {e}\")\n            db.session.rollback()\n\ndef nettoyer_historique():\n    \"\"\"Nettoie l'historique ancien pour √©viter l'accumulation excessive de donn√©es\"\"\"\n    from app import app\n    \n    with app.app_context():\n        try:\n            # Supprimer les entr√©es d'historique plus anciennes que 30 jours\n            limite = datetime.utcnow() - timedelta(days=30)\n            \n            from models import HistoriquePing\n            \n            # Compter les entr√©es √† supprimer\n            nb_a_supprimer = HistoriquePing.query.filter(\n                HistoriquePing.timestamp < limite\n            ).count()\n            \n            if nb_a_supprimer > 0:\n                # Supprimer les entr√©es anciennes\n                HistoriquePing.query.filter(\n                    HistoriquePing.timestamp < limite\n                ).delete()\n                \n                db.session.commit()\n                logger.info(f\"Historique nettoy√©: {nb_a_supprimer} entr√©es supprim√©es\")\n            \n        except Exception as e:\n            logger.error(f\"Erreur lors du nettoyage de l'historique: {e}\")\n            db.session.rollback()\n\ndef nettoyer_alertes():\n    \"\"\"Nettoie les alertes anciennes d√©j√† lues\"\"\"\n    from app import app\n    \n    with app.app_context():\n        try:\n            # Supprimer les alertes lues plus anciennes que 7 jours\n            limite = datetime.utcnow() - timedelta(days=7)\n            \n            nb_a_supprimer = Alerte.query.filter(\n                Alerte.timestamp < limite,\n                Alerte.lue == True\n            ).count()\n            \n            if nb_a_supprimer > 0:\n                Alerte.query.filter(\n                    Alerte.timestamp < limite,\n                    Alerte.lue == True\n                ).delete()\n                \n                db.session.commit()\n                logger.info(f\"Alertes nettoy√©es: {nb_a_supprimer} alertes supprim√©es\")\n            \n        except Exception as e:\n            logger.error(f\"Erreur lors du nettoyage des alertes: {e}\")\n            db.session.rollback()\n\ndef init_scheduler(app):\n    \"\"\"Initialise le planificateur de t√¢ches\"\"\"\n    try:\n        scheduler = BackgroundScheduler()\n        \n        # V√©rifier les √©quipements hors ligne toutes les minutes\n        scheduler.add_job(\n            func=verifier_equipements_hors_ligne,\n            trigger=IntervalTrigger(minutes=1),\n            id='verifier_equipements',\n            name='V√©rifier √©quipements hors ligne',\n            replace_existing=True\n        )\n        \n        # Nettoyer l'historique tous les jours √† 2h du matin\n        scheduler.add_job(\n            func=nettoyer_historique,\n            trigger='cron',\n            hour=2,\n            minute=0,\n            id='nettoyer_historique',\n            name='Nettoyer historique ancien',\n            replace_existing=True\n        )\n        \n        # Nettoyer les alertes tous les jours √† 3h du matin\n        scheduler.add_job(\n            func=nettoyer_alertes,\n            trigger='cron',\n            hour=3,\n            minute=0,\n            id='nettoyer_alertes',\n            name='Nettoyer alertes anciennes',\n            replace_existing=True\n        )\n        \n        # D√©marrer le planificateur\n        scheduler.start()\n        \n        logger.info(\"Planificateur de t√¢ches initialis√© avec succ√®s\")\n        \n        # Arr√™ter le planificateur proprement lors de l'arr√™t de l'application\n        import atexit\n        atexit.register(lambda: scheduler.shutdown())\n        \n    except Exception as e:\n        logger.error(f\"Erreur lors de l'initialisation du planificateur: {e}\")\n","size_bytes":6043},"attached_assets/simulateur_camera_1754599868297.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nSimulateur de cam√©ra/DVR - Envoie des pings p√©riodiques vers le serveur de monitoring\n\"\"\"\nimport requests\nimport time\nimport json\nimport random\nfrom datetime import datetime\n\nclass SimulateurCamera:\n    def __init__(self, serveur_monitoring, ma_ip, equipement_id, nom_equipement=\"Camera Simul√©e\"):\n        \"\"\"\n        Initialise le simulateur de cam√©ra\n        \n        Args:\n            serveur_monitoring: URL du serveur (ex: http://192.168.1.10:5000)\n            ma_ip: IP de cette machine qui simule la cam√©ra (ex: 192.168.1.100)\n            equipement_id: ID de l'√©quipement dans la base du serveur\n            nom_equipement: Nom pour l'affichage\n        \"\"\"\n        self.serveur_url = f\"{serveur_monitoring}/api/ping\"\n        self.ma_ip = ma_ip\n        self.equipement_id = equipement_id\n        self.nom = nom_equipement\n        self.actif = True\n        \n        print(f\"üîß Simulateur initialis√©:\")\n        print(f\"   Nom: {self.nom}\")\n        print(f\"   IP simul√©e: {self.ma_ip}\")\n        print(f\"   Serveur: {serveur_monitoring}\")\n        print(f\"   √âquipement ID: {self.equipement_id}\")\n    \n    def envoyer_ping(self):\n        \"\"\"Envoie un ping vers le serveur de monitoring\"\"\"\n        try:\n            # Temps de r√©ponse simul√© (comme une vraie cam√©ra)\n            response_time = round(random.uniform(20.0, 80.0), 1)\n            \n            # Donn√©es √† envoyer (format attendu par votre API)\n            data = {\n                \"ip\": self.ma_ip,\n                \"equipement_id\": self.equipement_id,\n                \"response_time\": response_time,\n                \"message\": f\"Ping depuis {self.nom} - Simulation PC\"\n            }\n            \n            print(f\"üì° {datetime.now().strftime('%H:%M:%S')} - Envoi ping...\")\n            \n            # Envoyer la requ√™te POST\n            response = requests.post(\n                self.serveur_url,\n                json=data,\n                headers={'Content-Type': 'application/json'},\n                timeout=10\n            )\n            \n            if response.status_code == 200:\n                result = response.json()\n                print(f\"   ‚úÖ Succ√®s ({response_time}ms) - Statut: {result.get('equipement', {}).get('statut', 'Inconnu')}\")\n            else:\n                print(f\"   ‚ùå Erreur HTTP {response.status_code}: {response.text}\")\n                \n        except requests.exceptions.ConnectionError:\n            print(f\"   ‚ùå Impossible de contacter le serveur {self.serveur_url}\")\n        except requests.exceptions.Timeout:\n            print(f\"   ‚è±Ô∏è Timeout - serveur trop lent\")\n        except Exception as e:\n            print(f\"   ‚ùå Erreur: {e}\")\n    \n    def demarrer_simulation(self, intervalle_secondes=60):\n        \"\"\"\n        D√©marre la simulation en boucle infinie\n        \n        Args:\n            intervalle_secondes: D√©lai entre chaque ping (d√©faut: 60s comme une vraie cam√©ra)\n        \"\"\"\n        print(f\"\\nüöÄ D√©marrage de la simulation (ping toutes les {intervalle_secondes}s)\")\n        print(\"   Appuyez sur Ctrl+C pour arr√™ter\")\n        print(\"-\" * 60)\n        \n        try:\n            # Premier ping imm√©diat\n            self.envoyer_ping()\n            \n            # Boucle principale\n            while self.actif:\n                time.sleep(intervalle_secondes)\n                self.envoyer_ping()\n                \n        except KeyboardInterrupt:\n            print(f\"\\n‚èπÔ∏è Simulation arr√™t√©e par l'utilisateur\")\n        except Exception as e:\n            print(f\"\\n‚ùå Erreur fatale: {e}\")\n\ndef main():\n    \"\"\"Interface de configuration\"\"\"\n    print(\"üé≠ Simulateur de Cam√©ra/DVR pour Monitoring\")\n    print(\"=\" * 50)\n    \n    # Configuration par d√©faut\n    serveur_defaut = \"http://192.168.1.10:5000\"\n    ip_defaut = \"192.168.1.100\"\n    id_defaut = 1\n    \n    print(\"\\nüìã Configuration:\")\n    serveur = input(f\"URL du serveur monitoring [{serveur_defaut}]: \").strip() or serveur_defaut\n    ip_camera = input(f\"IP de cette machine (cam√©ra simul√©e) [{ip_defaut}]: \").strip() or ip_defaut\n    \n    try:\n        equipement_id = int(input(f\"ID de l'√©quipement [{id_defaut}]: \").strip() or id_defaut)\n    except ValueError:\n        equipement_id = id_defaut\n    \n    nom = input(\"Nom de la cam√©ra [Camera Test]: \").strip() or \"Camera Test\"\n    \n    try:\n        intervalle = int(input(\"Intervalle entre pings (secondes) [60]: \").strip() or 60)\n    except ValueError:\n        intervalle = 60\n    \n    # Test de connexion initial\n    print(f\"\\nüîç Test de connexion vers {serveur}...\")\n    try:\n        response = requests.get(f\"{serveur.rstrip('/api/ping')}\", timeout=5)\n        print(\"   ‚úÖ Serveur accessible\")\n    except Exception as e:\n        print(f\"   ‚ö†Ô∏è Attention: {e}\")\n        continuer = input(\"Continuer quand m√™me ? (o/N): \").strip().lower()\n        if continuer not in ['o', 'oui', 'y', 'yes']:\n            return\n    \n    # Cr√©er et d√©marrer le simulateur\n    simulateur = SimulateurCamera(serveur, ip_camera, equipement_id, nom)\n    simulateur.demarrer_simulation(intervalle)\n\nif __name__ == \"__main__\":\n    main()","size_bytes":5123},"attached_assets/test_ping_1754599864794.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nScript pour tester l'API de ping du syst√®me de monitoring\n\"\"\"\nimport requests\nimport json\nimport time\nfrom datetime import datetime\n\ndef test_ping_equipement():\n    \"\"\"Teste l'envoi d'un ping vers l'API\"\"\"\n    \n    # URL de votre serveur (ajustez selon votre configuration)\n    base_url = \"http://localhost:5000\"\n    ping_url = f\"{base_url}/api/ping\"\n    \n    print(\"üîÑ Test de l'API de ping\")\n    print(\"=\" * 40)\n    \n    # Donn√©es de test pour votre √©quipement DVR\n    ping_data = {\n        \"ip\": \"192.144.11.1\",\n        \"equipement_id\": 1,  # ID de votre DVR dans la base\n        \"response_time\": 45.5,\n        \"message\": \"DVR en ligne - Test manuel\"\n    }\n    \n    print(f\"üì° Envoi du ping vers: {ping_url}\")\n    print(f\"üìä Donn√©es: {json.dumps(ping_data, indent=2)}\")\n    \n    try:\n        # Envoyer la requ√™te POST\n        response = requests.post(\n            ping_url,\n            json=ping_data,\n            headers={'Content-Type': 'application/json'},\n            timeout=10\n        )\n        \n        print(f\"üìà Status code: {response.status_code}\")\n        \n        if response.status_code == 200:\n            result = response.json()\n            print(\"‚úÖ SUCC√àS! Ping enregistr√©\")\n            print(f\"üìÑ R√©ponse: {json.dumps(result, indent=2)}\")\n            \n            # V√©rifier le statut via l'API\n            print(\"\\nüîç V√©rification du statut...\")\n            status_url = f\"{base_url}/api/equipements/statut\"\n            status_response = requests.get(status_url)\n            \n            if status_response.status_code == 200:\n                equipements = status_response.json()\n                for eq in equipements:\n                    if eq.get('id') == 1:\n                        statut = \"üü¢ EN LIGNE\" if eq.get('est_en_ligne') else \"üî¥ HORS LIGNE\"\n                        print(f\"   √âquipement {eq.get('nom')}: {statut}\")\n                        if eq.get('dernier_ping'):\n                            print(f\"   Dernier ping: {eq.get('dernier_ping')}\")\n            \n        else:\n            print(f\"‚ùå ERREUR: {response.status_code}\")\n            print(f\"üìÑ R√©ponse: {response.text}\")\n            \n    except requests.exceptions.ConnectionError:\n        print(\"‚ùå ERREUR: Impossible de se connecter au serveur\")\n        print(\"   V√©rifiez que l'application est d√©marr√©e sur localhost:5000\")\n    except requests.exceptions.Timeout:\n        print(\"‚ùå ERREUR: Timeout de la requ√™te\")\n    except Exception as e:\n        print(f\"‚ùå ERREUR inattendue: {e}\")\n\ndef test_multiple_pings():\n    \"\"\"Teste plusieurs pings cons√©cutifs\"\"\"\n    print(\"\\nüîÑ Test de pings multiples\")\n    print(\"=\" * 40)\n    \n    base_url = \"http://localhost:5000\"\n    ping_url = f\"{base_url}/api/ping\"\n    \n    # Simuler plusieurs √©quipements\n    equipements_test = [\n        {\"ip\": \"192.144.11.1\", \"equipement_id\": 1, \"response_time\": 45.5, \"message\": \"DVR Principal OK\"},\n        {\"ip\": \"192.168.1.101\", \"equipement_id\": 2, \"response_time\": 32.1, \"message\": \"Cam√©ra Entr√©e OK\"},\n        {\"ip\": \"192.168.1.102\", \"equipement_id\": 3, \"response_time\": 28.9, \"message\": \"Cam√©ra Parking OK\"},\n    ]\n    \n    for i, data in enumerate(equipements_test, 1):\n        print(f\"\\nüì° Ping {i}/3: {data['ip']}\")\n        \n        try:\n            response = requests.post(ping_url, json=data, timeout=5)\n            \n            if response.status_code == 200:\n                print(f\"   ‚úÖ Succ√®s ({data['response_time']}ms)\")\n            else:\n                print(f\"   ‚ùå √âchec: {response.status_code}\")\n                \n        except Exception as e:\n            print(f\"   ‚ùå Erreur: {e}\")\n        \n        # Pause entre les pings\n        time.sleep(1)\n\ndef test_avec_curl():\n    \"\"\"Affiche les commandes curl √©quivalentes\"\"\"\n    print(\"\\nüñ•Ô∏è  Commandes curl √©quivalentes\")\n    print(\"=\" * 40)\n    \n    curl_cmd = '''curl -X POST http://localhost:5000/api/ping \\\\\n  -H \"Content-Type: application/json\" \\\\\n  -d '{\n    \"ip\": \"192.144.11.1\",\n    \"equipement_id\": 1,\n    \"response_time\": 45.5,\n    \"message\": \"Test curl\"\n  }' '''\n    \n    print(\"Pour tester manuellement avec curl:\")\n    print(curl_cmd)\n    \n    # Version PowerShell\n    ps_cmd = '''Invoke-RestMethod -Uri \"http://localhost:5000/api/ping\" `\n  -Method POST `\n  -ContentType \"application/json\" `\n  -Body '{\"ip\":\"192.144.11.1\",\"equipement_id\":1,\"response_time\":45.5,\"message\":\"Test PowerShell\"}'\n'''\n    \n    print(\"\\nPour tester avec PowerShell:\")\n    print(ps_cmd)\n\nif __name__ == \"__main__\":\n    print(\"üîß Test de l'API de monitoring des cam√©ras\")\n    print(\"=\" * 50)\n    \n    # Test simple\n    test_ping_equipement()\n    \n    # Test multiple (optionnel)\n    response = input(\"\\n‚ùì Voulez-vous tester plusieurs pings ? (o/n): \")\n    if response.lower() in ['o', 'oui', 'y', 'yes']:\n        test_multiple_pings()\n    \n    # Afficher les alternatives\n    test_avec_curl()\n    \n    print(\"\\n‚úÖ Tests termin√©s!\")\n    print(\"üì± Rafra√Æchissez votre page web pour voir les changements\")","size_bytes":5026},"static/css/custom.css":{"content":"/* CSS personnalis√© pour le syst√®me de monitoring */\n\n/* Variables de couleurs pour le th√®me sombre */\n:root {\n    --primary-color: #007bff;\n    --success-color: #28a745;\n    --warning-color: #ffc107;\n    --danger-color: #dc3545;\n    --info-color: #17a2b8;\n    --dark-color: #343a40;\n    --light-color: #f8f9fa;\n    --bg-dark: #212529;\n    --bg-secondary: #343a40;\n}\n\n/* Styles g√©n√©raux */\nbody {\n    background: url('/static/images/background.svg') center/cover fixed, var(--bg-dark);\n    color: var(--light-color);\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    position: relative;\n}\n\n/* Overlay pour am√©liorer la lisibilit√© */\nbody::before {\n    content: '';\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(33, 37, 41, 0.85);\n    z-index: -1;\n}\n\n/* Navigation */\n.navbar-brand {\n    font-weight: bold;\n    font-size: 1.25rem;\n}\n\n.navbar-nav .nav-link {\n    font-weight: 500;\n    transition: all 0.3s ease;\n}\n\n.navbar-nav .nav-link:hover {\n    background-color: rgba(255, 255, 255, 0.1);\n    border-radius: 0.25rem;\n}\n\n.navbar-nav .nav-link.active {\n    background-color: var(--primary-color);\n    border-radius: 0.25rem;\n}\n\n/* Cartes */\n.card {\n    background-color: var(--bg-secondary);\n    border: 1px solid #495057;\n    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.3);\n    transition: all 0.3s ease;\n    backdrop-filter: blur(10px);\n    border-radius: 12px;\n}\n\n.card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.4);\n}\n\n.card-header {\n    background-color: #495057;\n    border-bottom: 1px solid #6c757d;\n}\n\n/* Cartes de statistiques color√©es */\n.card.bg-primary,\n.card.bg-success,\n.card.bg-warning,\n.card.bg-danger,\n.card.bg-info {\n    color: white;\n}\n\n.card.bg-warning {\n    color: #212529 !important;\n}\n\n/* Badges personnalis√©s */\n.badge {\n    font-size: 0.75em;\n    font-weight: 500;\n}\n\n/* Tableaux */\n.table-dark {\n    --bs-table-bg: var(--bg-secondary);\n}\n\n.table > :not(caption) > * > * {\n    border-bottom-color: #495057;\n}\n\n.table-hover > tbody > tr:hover > * {\n    background-color: rgba(255, 255, 255, 0.05);\n}\n\n/* Formulaires */\n.form-control,\n.form-select {\n    background-color: var(--bg-secondary);\n    border-color: #495057;\n    color: var(--light-color);\n}\n\n.form-control:focus,\n.form-select:focus {\n    background-color: var(--bg-secondary);\n    border-color: var(--primary-color);\n    color: var(--light-color);\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n/* Modals */\n.modal-content {\n    background-color: var(--bg-secondary);\n    border-color: #495057;\n}\n\n.modal-header {\n    border-bottom-color: #495057;\n}\n\n.modal-footer {\n    border-top-color: #495057;\n}\n\n/* Boutons */\n.btn {\n    transition: all 0.3s ease;\n}\n\n.btn:hover {\n    transform: translateY(-1px);\n}\n\n/* Alertes */\n.alert {\n    border: none;\n    border-radius: 0.5rem;\n}\n\n/* List group */\n.list-group-item {\n    background-color: var(--bg-secondary);\n    border-color: #495057;\n    color: var(--light-color);\n}\n\n.list-group-item:hover {\n    background-color: rgba(255, 255, 255, 0.05);\n}\n\n/* Pagination */\n.page-link {\n    background-color: var(--bg-secondary);\n    border-color: #495057;\n    color: var(--light-color);\n}\n\n.page-link:hover {\n    background-color: var(--primary-color);\n    border-color: var(--primary-color);\n    color: white;\n}\n\n.page-item.active .page-link {\n    background-color: var(--primary-color);\n    border-color: var(--primary-color);\n}\n\n/* Ic√¥nes de statut */\n.text-online {\n    color: var(--success-color) !important;\n}\n\n.text-offline {\n    color: var(--danger-color) !important;\n}\n\n/* Animations */\n@keyframes pulse {\n    0% {\n        transform: scale(1);\n    }\n    50% {\n        transform: scale(1.05);\n    }\n    100% {\n        transform: scale(1);\n    }\n}\n\n.pulse {\n    animation: pulse 2s infinite;\n}\n\n/* Responsive */\n@media (max-width: 768px) {\n    .container {\n        padding-left: 0.75rem;\n        padding-right: 0.75rem;\n    }\n    \n    .card-body {\n        padding: 0.75rem;\n    }\n    \n    .table-responsive {\n        font-size: 0.875rem;\n    }\n}\n\n/* Scrollbar personnalis√©e */\n::-webkit-scrollbar {\n    width: 8px;\n}\n\n::-webkit-scrollbar-track {\n    background: var(--bg-secondary);\n}\n\n::-webkit-scrollbar-thumb {\n    background: #6c757d;\n    border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: #495057;\n}\n\n/* Styles pour les graphiques */\ncanvas {\n    background-color: transparent !important;\n}\n\n/* Footer */\nfooter {\n    margin-top: auto;\n}\n\n/* Classes utilitaires */\n.text-shadow {\n    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);\n}\n\n.border-left-primary {\n    border-left: 3px solid var(--primary-color) !important;\n}\n\n.border-left-success {\n    border-left: 3px solid var(--success-color) !important;\n}\n\n.border-left-warning {\n    border-left: 3px solid var(--warning-color) !important;\n}\n\n.border-left-danger {\n    border-left: 3px solid var(--danger-color) !important;\n}\n\n/* √âtats de chargement */\n.loading {\n    opacity: 0.6;\n    pointer-events: none;\n}\n\n.spinner-border-sm {\n    width: 1rem;\n    height: 1rem;\n}\n\n/* Styles pour les alertes non lues */\n.bg-warning.bg-opacity-10 {\n    background-color: rgba(255, 193, 7, 0.1) !important;\n}\n\n.border-warning {\n    border-color: var(--warning-color) !important;\n}\n\n/* Styles pour le footer */\nfooter.bg-dark {\n    background-color: #1a1d20 !important;\n}\n\n/* Am√©lioration de la lisibilit√© */\n.text-muted {\n    color: #adb5bd !important;\n}\n\n/* Styles pour les cartes de statistiques */\n.card.bg-primary .card-body,\n.card.bg-success .card-body,\n.card.bg-info .card-body,\n.card.bg-danger .card-body {\n    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);\n}\n\n.card.bg-warning .card-body {\n    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);\n}\n\n/* Am√©lioration de l'image d'arri√®re-plan pour tous les contenus */\n.container {\n    background: rgba(33, 37, 41, 0.1);\n    border-radius: 15px;\n    padding: 2rem;\n    backdrop-filter: blur(5px);\n}\n\n/* Am√©lioration des alertes */\n.alert {\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n/* Navigation am√©lior√©e */\n.navbar {\n    backdrop-filter: blur(20px);\n    background: rgba(33, 37, 41, 0.95) !important;\n}\n\n/* Footer am√©lior√© */\nfooter.bg-dark {\n    background: rgba(26, 29, 32, 0.95) !important;\n    backdrop-filter: blur(20px);\n}\n","size_bytes":6367}}}