#!/usr/bin/env python3
"""
D√©marrage simplifi√© pour Windows - Version sans erreurs
R√©sout le probl√®me de connexion localhost refus√©e
"""

import os
import sys
import time
import subprocess
from pathlib import Path

def setup_environment():
    """Configuration de l'environnement Windows"""
    # Variables d'environnement essentielles
    os.environ['SESSION_SECRET'] = 'windows-secret-key-123'
    os.environ['DATABASE_URL'] = 'sqlite:///monitoring_windows.db'
    os.environ['FLASK_ENV'] = 'production'
    os.environ['FLASK_DEBUG'] = '0'
    
    # D√©sactiver les fonctionnalit√©s probl√©matiques
    os.environ['DISABLE_SCHEDULER'] = '1'
    os.environ['DISABLE_CAMERA_STREAMS'] = '1'
    
    print("‚úì Configuration Windows appliqu√©e")

def check_dependencies():
    """V√©rifier les d√©pendances essentielles"""
    required = ['flask', 'flask_sqlalchemy', 'flask_login', 'werkzeug']
    missing = []
    
    for module in required:
        try:
            __import__(module)
        except ImportError:
            missing.append(module.replace('_', '-'))
    
    if missing:
        print(f"‚ùå Modules manquants: {', '.join(missing)}")
        print("Ex√©cutez: install_simple_windows.bat")
        return False
    
    print("‚úì Toutes les d√©pendances sont pr√©sentes")
    return True

def start_flask_app():
    """D√©marrer l'application Flask de mani√®re s√©curis√©e"""
    try:
        # Configuration du chemin
        current_dir = Path(__file__).parent.absolute()
        sys.path.insert(0, str(current_dir))
        
        print("Importation de l'application...")
        from app import app
        
        # Importer les routes sans erreur
        try:
            import routes
            print("‚úì Routes charg√©es")
        except ImportError as e:
            print(f"‚ö†Ô∏è Erreur routes: {e}")
        
        # Configuration pour Windows
        app.config.update({
            'DEBUG': False,
            'TESTING': False,
            'ENV': 'production'
        })
        
        print("=" * 50)
        print("  MONITORING CAMERAS - WINDOWS")
        print("=" * 50)
        print("üåê URL: http://127.0.0.1:5000")
        print("üë§ Admin: admin / admin123")
        print("üîß Mode: Production Windows")
        print("=" * 50)
        print("Serveur en cours de d√©marrage...")
        
        # Petit d√©lai pour l'affichage
        time.sleep(2)
        
        # D√©marrer avec param√®tres Windows optimis√©s
        app.run(
            host='127.0.0.1',     # Localhost uniquement
            port=5000,            # Port standard
            debug=False,          # Pas de debug
            use_reloader=False,   # Pas de rechargement
            threaded=True,        # Multi-thread
            passthrough_errors=True  # Afficher les erreurs
        )
        
    except ImportError as e:
        print(f"‚ùå Erreur d'importation: {e}")
        print("\nSolutions:")
        print("1. Ex√©cutez: install_simple_windows.bat")
        print("2. V√©rifiez que vous √™tes dans le bon dossier")
        return False
        
    except OSError as e:
        if "Address already in use" in str(e):
            print("‚ùå Le port 5000 est d√©j√† utilis√©")
            print("Solution: Fermez les autres applications sur le port 5000")
        else:
            print(f"‚ùå Erreur r√©seau: {e}")
        return False
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

def main():
    """Point d'entr√©e principal"""
    print("Syst√®me de Monitoring Cam√©ras - Windows")
    print("D√©marrage s√©curis√©...\n")
    
    # V√©rifications pr√©liminaires
    setup_environment()
    
    if not check_dependencies():
        input("\nAppuyez sur Entr√©e pour quitter...")
        return
    
    print("D√©marrage de l'application Flask...\n")
    
    try:
        start_flask_app()
    except KeyboardInterrupt:
        print("\n\n‚úÖ Serveur arr√™t√© par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        input("Appuyez sur Entr√©e pour quitter...")

if __name__ == '__main__':
    main()